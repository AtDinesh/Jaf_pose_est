<?xml version='1.0' encoding='ISO-8859-1' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>ad.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>ad_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <class kind="struct">ad_rec_t</class>
    <class kind="struct">ad_play_t</class>
    <member kind="define">
      <type>#define</type>
      <name>AD_SAMPLE_SIZE</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>a21e7cf6f08592c2fa2f78eb069f0e161</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULT_SAMPLES_PER_SEC</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>af6fb753bcfbd8dedec800ba4d0fb8546</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AD_OK</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>a8d1358baba080a2f6b0d350928af7a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AD_EOF</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>a8aa969c2d485c3c17cf9abfd1bb88bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AD_ERR_GEN</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>ad75f71249c0e72e6867599af315fe27d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AD_ERR_NOT_OPEN</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>a7ac31adbbd108d40792fc6ba3d14929f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>AD_ERR_WAVE</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>abdeca1c656c9ed4699402adb3556ae39</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DEFAULT_DEVICE</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>a84cb8bbda8042a324f49102bc200cc54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ad_rec_t *</type>
      <name>ad_open_dev</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>a43f66257a2457d6c711dc5c694bfc02f</anchor>
      <arglist>(const char *dev, int32 samples_per_sec)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ad_rec_t *</type>
      <name>ad_open_sps</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>a71b4eec805fbe5c398ea0897816de6f0</anchor>
      <arglist>(int32 samples_per_sec)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ad_rec_t *</type>
      <name>ad_open</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>a3def0da951e840fb4c72ef9259540686</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ad_start_rec</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>a9cb212b93cb439ba04dec2109ca043ff</anchor>
      <arglist>(ad_rec_t *)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ad_stop_rec</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>a20fb285a5f93e172f6a6e04359216aa5</anchor>
      <arglist>(ad_rec_t *)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ad_close</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>a6bcf3ed5e9d0c2d51086cae93bc3b3fc</anchor>
      <arglist>(ad_rec_t *)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ad_read</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>ad4a5f4ab5267003169f6d3e15e54f697</anchor>
      <arglist>(ad_rec_t *, int16 *buf, int32 max)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ad_play_t *</type>
      <name>ad_open_play_sps</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>a89f8a1820e1c5ea658e692d2d15a7315</anchor>
      <arglist>(int32 samples_per_sec)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ad_play_t *</type>
      <name>ad_open_play</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>a859bfe925f634f6bb3faa1a52c013388</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ad_start_play</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>a899e10aaecde4ab33b9849ed7bb9fb73</anchor>
      <arglist>(ad_play_t *)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ad_stop_play</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>a823c2efb2892ff2c9b112ffcda58ce17</anchor>
      <arglist>(ad_play_t *)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ad_close_play</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>aa65454c205e3f573f4f3433a6a044448</anchor>
      <arglist>(ad_play_t *)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ad_write</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>aea278a0c26051f4fe011778f225ea9c4</anchor>
      <arglist>(ad_play_t *, int16 *buf, int32 len)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ad_mu2li</name>
      <anchorfile>ad_8h.html</anchorfile>
      <anchor>a7eab4d2f35d221c569b85d4240b83600</anchor>
      <arglist>(int16 *outbuf, unsigned char *inbuf, int32 n_samp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>agc.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>agc_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <class kind="struct">agc_s</class>
    <member kind="typedef">
      <type>enum agc_type_e</type>
      <name>agc_type_t</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>a5524df49e0425cc6b1c002bc704a8103</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct agc_s</type>
      <name>agc_t</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>a4998d40c67716fdea6791f8070642dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>agc_type_e</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>aef1d2c7e32d37aa84d70c2f3675fc923</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT agc_type_t</type>
      <name>agc_type_from_str</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>aebd0689591488378192e13f6d2646bc1</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT agc_t *</type>
      <name>agc_init</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>a5c7ee7b19f8dcfd0c28b4dc76a283dc7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>agc_free</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>a6a050fc4b079be05b1946636d5d7f3aa</anchor>
      <arglist>(agc_t *agc)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>agc_max</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>a29a2a4dd80141af1c3476094c353b739</anchor>
      <arglist>(agc_t *agc, mfcc_t **mfc, int32 n_frame)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>agc_emax</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>ac2cdd4c519b46824c5b28c5b769b5ecd</anchor>
      <arglist>(agc_t *agc, mfcc_t **mfc, int32 n_frame)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>agc_emax_update</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>af47b6004f2f963ae0019a67450b892c2</anchor>
      <arglist>(agc_t *agc)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float32</type>
      <name>agc_emax_get</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>a7b439fb5d36250d09bb9d459c1e28ba5</anchor>
      <arglist>(agc_t *agc)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>agc_emax_set</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>a4fd17f224b5d8f7bfcaa9389d11716eb</anchor>
      <arglist>(agc_t *agc, float32 m)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>agc_noise</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>ae65d4be1d74aea11b7e16e3777272d13</anchor>
      <arglist>(agc_t *agc, mfcc_t **mfc, int32 n_frame)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float32</type>
      <name>agc_get_threshold</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>a77d0987174a1b3c6e8fcd63fe82f33ce</anchor>
      <arglist>(agc_t *agc)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>agc_set_threshold</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>aaaa9e15f192c91ad64c343b7c6db6714</anchor>
      <arglist>(agc_t *agc, float32 threshold)</arglist>
    </member>
    <member kind="variable">
      <type>SPHINXBASE_EXPORT const char *</type>
      <name>agc_type_str</name>
      <anchorfile>agc_8h.html</anchorfile>
      <anchor>a6ea1b2b3d482cf08eb36084629503c80</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bio.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>bio_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>BYTE_ORDER_MAGIC</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>ac08e1e4728563a03ff6c937bfa8fd845</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REVERSE_SENSE_SWAP_INT16</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>abf9af8ac9d8a67710371365812869c92</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REVERSE_SENSE_SWAP_INT32</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>a2c277e579a007b5c46bd762a7d18b2cf</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_readhdr</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>a7a155ff51740f1d9a31f7bb7b6e4bc3a</anchor>
      <arglist>(FILE *fp, char ***name, char ***val, int32 *swap)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_writehdr_version</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>a9662c09be1f18377488dedb8e7ca0bfd</anchor>
      <arglist>(FILE *fp, char *version)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_writehdr</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>adc41fc6124fa3e52267c0a2c1036246f</anchor>
      <arglist>(FILE *fp,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>bio_hdrarg_free</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>adb3c858a50381aeff022ccd4271af2d9</anchor>
      <arglist>(char **name, char **val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_fread</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>a7068bb61e421bc46a6989cef3b37c833</anchor>
      <arglist>(void *buf, int32 el_sz, int32 n_el, FILE *fp, int32 swap, uint32 *chksum)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_fwrite</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>a3b131beb20492e1a6f46c9b4dd81a64e</anchor>
      <arglist>(void *buf, int32 el_sz, int32 n_el, FILE *fp, int32 swap, uint32 *chksum)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_fread_1d</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>aaeda1ca5a5c0ca5a9e5b4820c442bbe5</anchor>
      <arglist>(void **buf, size_t el_sz, uint32 *n_el, FILE *fp, int32 sw, uint32 *ck)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_fread_2d</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>a70604d0f8035f0868f9284fa82e4fdb8</anchor>
      <arglist>(void ***arr, size_t e_sz, uint32 *d1, uint32 *d2, FILE *fp, uint32 swap, uint32 *chksum)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>bio_fread_3d</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>aca6a6b71d02b9e5ca6b136a28640e0c1</anchor>
      <arglist>(void ****arr, size_t e_sz, uint32 *d1, uint32 *d2, uint32 *d3, FILE *fp, uint32 swap, uint32 *chksum)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>bio_verify_chksum</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>ad07e2ee9f2f01d3ff3232008098295a0</anchor>
      <arglist>(FILE *fp, int32 byteswap, uint32 chksum)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int16 *</type>
      <name>bio_read_wavfile</name>
      <anchorfile>bio_8h.html</anchorfile>
      <anchor>afb2a720bfe1c63d5280d343715292d61</anchor>
      <arglist>(char const *directory, char const *filename, char const *extension, int32 header, int32 endian, int32 *nsamps)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bitvec.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>bitvec_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="no" imported="no">sphinxbase/ckd_alloc.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>BITVEC_BITS</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>aa992f8d4c7dbe0b71bfd1e01ce279167</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_size</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>a1d82193826583f234a71cba32267d3f3</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_alloc</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>a866043a7ac23e137f6c2f2466f4abc70</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_free</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>a5628e35c88ac7e91b99dce916758824a</anchor>
      <arglist>(v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_set</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>ae90878b8f2316f5733d83a3f47d378ac</anchor>
      <arglist>(v, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_set_all</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>ab7abefb917e02790e9384d3149ff461e</anchor>
      <arglist>(v, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_clear</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>a74b3387345ca2730a8067626878843fc</anchor>
      <arglist>(v, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_clear_all</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>a89f80d7a8040e9225f3c1c9bf102ae1d</anchor>
      <arglist>(v, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_is_set</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>ae323f80288b2ff946d6d8b0e38f791c9</anchor>
      <arglist>(v, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>bitvec_is_clear</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>a8154409a6e05e7c1ed7f21eff5ed06d4</anchor>
      <arglist>(v, b)</arglist>
    </member>
    <member kind="typedef">
      <type>uint32</type>
      <name>bitvec_t</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>ade0d20aa7e2ccec4e6fcf06419251f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT bitvec_t *</type>
      <name>bitvec_realloc</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>a617e9fca97ca02a5e959f989c5c1a4e4</anchor>
      <arglist>(bitvec_t *vec, size_t old_len, size_t new_len)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT size_t</type>
      <name>bitvec_count_set</name>
      <anchorfile>bitvec_8h.html</anchorfile>
      <anchor>ac8eeaf487cd029e23fffe676f9a77a10</anchor>
      <arglist>(bitvec_t *vec, size_t len)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>case.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>case_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>UPPER_CASE</name>
      <anchorfile>case_8h.html</anchorfile>
      <anchor>a3299c549655d5af1fcbc384ee7fd68e3</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LOWER_CASE</name>
      <anchorfile>case_8h.html</anchorfile>
      <anchor>a44403ce2c3f4378aca12ffb732f24cef</anchor>
      <arglist>(c)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ucase</name>
      <anchorfile>case_8h.html</anchorfile>
      <anchor>a79d99e36b7c2c36dcc6f7f0df746384e</anchor>
      <arglist>(char *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>lcase</name>
      <anchorfile>case_8h.html</anchorfile>
      <anchor>ac0e30dac40f15762f39270f65bd8cdba</anchor>
      <arglist>(char *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>strcmp_nocase</name>
      <anchorfile>case_8h.html</anchorfile>
      <anchor>ad276a997bd6709d986aa6e1e4e06c210</anchor>
      <arglist>(const char *str1, const char *str2)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>strncmp_nocase</name>
      <anchorfile>case_8h.html</anchorfile>
      <anchor>ae7c2a7f29d72b9516a947f5c69a043db</anchor>
      <arglist>(const char *str1, const char *str2, size_t len)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ckd_alloc.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>ckd__alloc_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>ckd_calloc</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>aa00ef21903bc4f8a972488417adc8d2e</anchor>
      <arglist>(n, sz)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_malloc</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a8e89a31c3c70710a8e023a177084bff2</anchor>
      <arglist>(sz)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_realloc</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>afd496738b3e114bd494c5a0955f1bfb3</anchor>
      <arglist>(ptr, sz)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_salloc</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>ad313f92478859f9e4ea99d0f6e78c393</anchor>
      <arglist>(ptr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_calloc_2d</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a949e7b50fcd9697b1563fa57f50e9c4f</anchor>
      <arglist>(d1, d2, sz)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_calloc_3d</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>af716d69c9fbde1d8b2678da9c260ddc7</anchor>
      <arglist>(d1, d2, d3, sz)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_calloc_4d</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a5364600029b5bd488e41f29d6c5ffb11</anchor>
      <arglist>(d1, d2, d3, d4, s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_alloc_2d_ptr</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>ad5d0dce212e97207af42803a3add00e1</anchor>
      <arglist>(d1, d2, bf, sz)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_free_2d_ptr</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a0afe1152d34da544602e6ab1635e05b1</anchor>
      <arglist>(bf)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_alloc_3d_ptr</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>ab29a3fbbd58bc59aa2827eaeda090d06</anchor>
      <arglist>(d1, d2, d3, bf, sz)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ckd_free_3d_ptr</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>af03a0583f358dbee5200910d151b490e</anchor>
      <arglist>(bf)</arglist>
    </member>
    <member kind="function">
      <type>jmp_buf *</type>
      <name>ckd_set_jump</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a0ec6d92241b1912b10f59519d553acb9</anchor>
      <arglist>(jmp_buf *env, int abort)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ckd_fail</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>ab81dfe13d2237c64182f06f66fab7b0e</anchor>
      <arglist>(char *format,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>__ckd_calloc__</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a903aef4c99a8f19b555a34c9e31c61f8</anchor>
      <arglist>(size_t n_elem, size_t elem_size, const char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>__ckd_malloc__</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a861f3b9f9730dd87a1dfaf3be2218fd0</anchor>
      <arglist>(size_t size, const char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>__ckd_realloc__</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a138dd425d0b3329aa214597cb3bd62bd</anchor>
      <arglist>(void *ptr, size_t new_size, const char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char *</type>
      <name>__ckd_salloc__</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>ad92dae54c994a4f90c842e42d05c494a</anchor>
      <arglist>(const char *origstr, const char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>__ckd_calloc_2d__</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a141713f7d0ac99eac338d6d8ae35b771</anchor>
      <arglist>(size_t d1, size_t d2, size_t elemsize, const char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>__ckd_calloc_3d__</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a19c770c65f642488f6045c442f53fc0c</anchor>
      <arglist>(size_t d1, size_t d2, size_t d3, size_t elemsize, const char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void ****</type>
      <name>__ckd_calloc_4d__</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a7881d3a852b82336f644f504453bb839</anchor>
      <arglist>(size_t d1, size_t d2, size_t d3, size_t d4, size_t elem_size, char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>__ckd_alloc_3d_ptr</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>af9a3ef2d363ee6a53429427d1d9327a6</anchor>
      <arglist>(size_t d1, size_t d2, size_t d3, void *store, size_t elem_size, char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>__ckd_alloc_2d_ptr</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a965f553ee64bbfbeda048d43393ae04b</anchor>
      <arglist>(size_t d1, size_t d2, void *store, size_t elem_size, char *caller_file, int caller_line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ckd_free</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a31c6b405558620ac37599737b5722fbf</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ckd_free_2d</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a8246c071ac12e98b7e1df9fe6da15aef</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ckd_free_3d</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a443accde4663a4a07c6d147088614d57</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ckd_free_4d</name>
      <anchorfile>ckd__alloc_8h.html</anchorfile>
      <anchor>a2fb0211c16bcbd89d932f383e28b9a7a</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cmd_ln.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>cmd__ln_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <class kind="struct">arg_s</class>
    <member kind="define">
      <type>#define</type>
      <name>ARG_STRINGIFY</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a98a8fc7c21a0832cd44e3a6e10844b1e</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_STRINGIFY1</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ae71d493fb63447033e8797f44fe7bb8d</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_boolean_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a159e691c95089689cf9a8f85a67830a6</anchor>
      <arglist>(c, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_boolean_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ad4984b45985a6c5e2b231cf1f9b44fe4</anchor>
      <arglist>(c, n, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_int32_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a744cba615ad615a3bb0fc309e0bfb4c8</anchor>
      <arglist>(c, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_float32_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>aac984a3d645ca2293a711dc77e9441e6</anchor>
      <arglist>(c, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_float64_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ad1ef54ed340feb9aa6cc0a32d4fe041e</anchor>
      <arglist>(c, n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_int32_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a4e2c787a885bf6dd5f17c2ba94670bb1</anchor>
      <arglist>(c, n, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_float32_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ae6d8f136f938b0b997dbe4b5d4cbd7f6</anchor>
      <arglist>(c, n, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_float64_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a2fc588ffad9586cad2bf4649a6a26269</anchor>
      <arglist>(c, n, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_exists</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a35020ed4f3aae151fc654dea22dda028</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_access</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>aa332e626631dfa1b7d93267d1b2384ba</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_str</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ab5bd3d0b7f28a485411da21a5e3984b3</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_str_list</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a5061e894a4b65597c046a49b2c61f28b</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_int32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ad3c5abaaeda4f3fd4462a24d41db7589</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_float32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a95b9ea6b4ef4a6ae9718b7df5fffdde8</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_float64</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a3468b03e9089e4b9b4ccd5b9e4347a9c</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_boolean</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a168e6f2cf367471406614a70d2b42ae8</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_str</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>add9cb281562711418b6c795f5a6eb206</anchor>
      <arglist>(n, s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_int32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ab63087898153823d7a7041669d60cfae</anchor>
      <arglist>(n, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_float32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a2642012877117ba59dec59d5bfdbbed1</anchor>
      <arglist>(n, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_float64</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ae9b20503ea67f45dc43312d13068a127</anchor>
      <arglist>(n, f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_set_boolean</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>aa6ee66099aca6807d03c70a9d3e5f2a3</anchor>
      <arglist>(n, b)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cmd_ln_print_help</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>aac4bb58af379a71fad4e1adc7fb4d476</anchor>
      <arglist>(f, d)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_REQUIRED</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ab1f031eb9c89fa1bcae95b1c7532fb3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_INTEGER</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a59c01ad9c48f29ac877ba14dc90808de</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_FLOATING</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ac8a280a53349bdd41d15edb4fa37972f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_STRING</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a4de5ed5fcf59a18b24bc9f6449cc9356</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_BOOLEAN</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ac7d08ff59bb6905c3375162e75913e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_STRING_LIST</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a0698bd0586e83569c1c0d86f072cfe13</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQARG_INTEGER</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a8186f2660ad6b63be15019598a8dbb36</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQARG_FLOATING</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a92ac706b4ccd544ebea6e0ceaccf3873</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQARG_STRING</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>abaf37a6c677dde76bb1a211b818541bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQARG_BOOLEAN</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ac98546cfe85afea642248ae3063c2258</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_INT32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a7ca1061dca6e8d4e7882bcefe1d15722</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_FLOAT32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ad9b1952e4f1def9ee6a88791375b3901</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ARG_FLOAT64</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>aceb617c8572cf5ad6257b35e6d8919e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQARG_INT32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a49a6267bbca65099157aad7c2adc52b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQARG_FLOAT32</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a46a5db6810b67a506c6074a76f003798</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REQARG_FLOAT64</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a501b468ee6e97644b9ca75e4bf9cd1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct arg_s</type>
      <name>arg_t</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a7555950a1a9a65eee866083bd8ce4301</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct cmd_ln_s</type>
      <name>cmd_ln_t</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a0c78d3d751be17a8c2d58ee81ae21182</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmd_ln_t *</type>
      <name>cmd_ln_init</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>afdba0ab4dfe8a3ad9d49a6732bd62c42</anchor>
      <arglist>(cmd_ln_t *inout_cmdln, arg_t const *defn, int32 strict,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmd_ln_t *</type>
      <name>cmd_ln_retain</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a975f5bf7b6f4fc95f426d1979281f73b</anchor>
      <arglist>(cmd_ln_t *cmdln)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>cmd_ln_free_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a26707fc85e87d8999e368a680e7873cd</anchor>
      <arglist>(cmd_ln_t *cmdln)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmd_ln_t *</type>
      <name>cmd_ln_parse_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>aa5a3a9e49198d8fd0dd3424fb880b6b6</anchor>
      <arglist>(cmd_ln_t *inout_cmdln, arg_t const *defn, int32 argc, char *argv[], int32 strict)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmd_ln_t *</type>
      <name>cmd_ln_parse_file_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a57f54649952a07b8bef888af4e416550</anchor>
      <arglist>(cmd_ln_t *inout_cmdln, arg_t const *defn, char const *filename, int32 strict)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT anytype_t *</type>
      <name>cmd_ln_access_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ac8d204103a24e39efefda608db8d81f7</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char const *</type>
      <name>cmd_ln_str_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>af0aa15288e06fc8271298e4fa7cdc91a</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char const **</type>
      <name>cmd_ln_str_list_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a8ef7df4f5749b5517f3a655566104a10</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT long</type>
      <name>cmd_ln_int_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a3bf86d597effc163148fddf14c0d117a</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT double</type>
      <name>cmd_ln_float_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a2deca68514704cafbb7ec594b8ff38fe</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_set_str_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a3868b219fd3eaf64e902db38145c1c59</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name, char const *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_set_int_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>afd5eef797f4786d7a1ddf4a64018cc7d</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name, long iv)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_set_float_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a71c02d36c1db0c1d4e6349bd253d9b59</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name, double fv)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>cmd_ln_exists_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ab4ad5ae130e3c2c042590b41768635e3</anchor>
      <arglist>(cmd_ln_t *cmdln, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_print_help_r</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a103dabd597830caf65ec4ef3fdc71a1a</anchor>
      <arglist>(cmd_ln_t *cmdln, FILE *fp, const arg_t *defn)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cmd_ln_parse</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a42447819b47aab58ee53f4745244f7f7</anchor>
      <arglist>(const arg_t *defn, int32 argc, char *argv[], int32 strict)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cmd_ln_parse_file</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>ab7970c08288fae94d211a4252381bc61</anchor>
      <arglist>(const arg_t *defn, char const *filename, int32 strict)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_appl_enter</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a7b06faa9f83eb8a2b045f8cfb6b67d36</anchor>
      <arglist>(int argc, char *argv[], char const *default_argfn, const arg_t *defn)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_appl_exit</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a97d5edba5ad53d97a159ac8ab9234de7</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmd_ln_t *</type>
      <name>cmd_ln_get</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a6e10003b5e86ec317c1b78c0655972af</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmd_ln_free</name>
      <anchorfile>cmd__ln_8h.html</anchorfile>
      <anchor>a439d3f832f92ae655f1028445aa91602</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cmn.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>cmn_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <class kind="struct">cmn_t</class>
    <member kind="define">
      <type>#define</type>
      <name>CMN_WIN_HWM</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>abbf37b74032c295136b4b299ecfcedae</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CMN_WIN</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>a500dafed8351d334da9290ec4f3f6ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum cmn_type_e</type>
      <name>cmn_type_t</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>a9384c411b10e9db9745cfb550a5c7652</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>cmn_type_e</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>a5bb134416e9e63a317eac20b0102bd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmn_type_t</type>
      <name>cmn_type_from_str</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>acf5e65a03a0d74630add4a400fed0ce8</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmn_t *</type>
      <name>cmn_init</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>a7ba6ce5489afce232b9bb61bd2ebd20f</anchor>
      <arglist>(int32 veclen)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmn</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>accf10de8ef4d98b4bf591529cf16565e</anchor>
      <arglist>(cmn_t *cmn, mfcc_t **mfc, int32 varnorm, int32 n_frame)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmn_prior</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>aa622cf1b6a1b9a9bffd8f60b903bfc42</anchor>
      <arglist>(cmn_t *cmn, mfcc_t **incep, int32 varnorm, int32 nfr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmn_prior_update</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>aae61df2ec71082520669fc63d94bb1ef</anchor>
      <arglist>(cmn_t *cmn)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmn_prior_set</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>a0f6f70d51143d6a33130650b8d4758ab</anchor>
      <arglist>(cmn_t *cmn, mfcc_t const *vec)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmn_prior_get</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>a4f624f5b805288f66fa05b79b1e4f383</anchor>
      <arglist>(cmn_t *cmn, mfcc_t *vec)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cmn_free</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>a0f70f378107e3d4e861e39d4f76d8d50</anchor>
      <arglist>(cmn_t *cmn)</arglist>
    </member>
    <member kind="variable">
      <type>SPHINXBASE_EXPORT const char *</type>
      <name>cmn_type_str</name>
      <anchorfile>cmn_8h.html</anchorfile>
      <anchor>ae2ab0bad7168386076c43fc2a421867f</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cont_ad.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>cont__ad_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <includes id="ad_8h" name="ad.h" local="no" imported="no">sphinxbase/ad.h</includes>
    <class kind="struct">spseg_s</class>
    <class kind="struct">cont_ad_t</class>
    <member kind="define">
      <type>#define</type>
      <name>CONT_AD_STATE_SIL</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>a2b7422b8273b64e5c9909f0d4ed2a109</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CONT_AD_STATE_SPEECH</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>aa9664991fbf6001a8ee29e9be7dd667c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct spseg_s</type>
      <name>spseg_t</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>a5153bcdd6b0bb75c8c37482a3c312c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cont_ad_t *</type>
      <name>cont_ad_init</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>af28bf56f17d5cfebf4d960ebed44ca64</anchor>
      <arglist>(ad_rec_t *ad, int32(*adfunc)(ad_rec_t *ad, int16 *buf, int32 max))</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cont_ad_t *</type>
      <name>cont_ad_init_rawmode</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>a1a9bbf961917827f5d03adcd409dda35</anchor>
      <arglist>(ad_rec_t *ad, int32(*adfunc)(ad_rec_t *ad, int16 *buf, int32 max))</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_read</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>ae664132adc514db01a1d5c1209ded4ba</anchor>
      <arglist>(cont_ad_t *r, int16 *buf, int32 max)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_buffer_space</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>a680721acc14ac191bbae3a4940ed357d</anchor>
      <arglist>(cont_ad_t *r)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_calib</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>a7a1d0eaf8292a4549b00a97163999321</anchor>
      <arglist>(cont_ad_t *cont)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_calib_loop</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>a8a575044cf22d96a5ec8fb20410b0065</anchor>
      <arglist>(cont_ad_t *r, int16 *buf, int32 max)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_calib_size</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>a6a86e16fb673748be753e2a281ce837a</anchor>
      <arglist>(cont_ad_t *r)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_set_thresh</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>af9a8f9f66bbfd1ce48fe9366fafcc40d</anchor>
      <arglist>(cont_ad_t *cont, int32 sil, int32 sp)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_set_params</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>aa402397c575922ea352afe5e66c02a34</anchor>
      <arglist>(cont_ad_t *r, int32 delta_sil, int32 delta_speech, int32 min_noise, int32 max_noise, int32 winsize, int32 speech_onset, int32 sil_onset, int32 leader, int32 trailer, float32 adapt_rate)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_get_params</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>aedd013bc2c6aca14fba02049ed7645d7</anchor>
      <arglist>(cont_ad_t *r, int32 *delta_sil, int32 *delta_speech, int32 *min_noise, int32 *max_noise, int32 *winsize, int32 *speech_onset, int32 *sil_onset, int32 *leader, int32 *trailer, float32 *adapt_rate)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_reset</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>a12a017ea8a96dc54445e937bb9de24ae</anchor>
      <arglist>(cont_ad_t *cont)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_close</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>a381c3df971d43a20e8e8b8da43d2872d</anchor>
      <arglist>(cont_ad_t *cont)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>cont_ad_powhist_dump</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>a288394cd94a4992bec9d3911cc875767</anchor>
      <arglist>(FILE *fp, cont_ad_t *cont)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_detach</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>a8f8284f329d1c0e04856ec9d13020dc4</anchor>
      <arglist>(cont_ad_t *c)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_attach</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>a41e7f8c5925dba26dd51e8f7a3d16404</anchor>
      <arglist>(cont_ad_t *c, ad_rec_t *a, int32(*func)(ad_rec_t *, int16 *, int32))</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_set_rawfp</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>a662ed7c409479060e3b5ac8eb7bd1865</anchor>
      <arglist>(cont_ad_t *c, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_ad_set_logfp</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>a16c5810eb19ed89522ef4c3394bbfe83</anchor>
      <arglist>(cont_ad_t *c, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>cont_set_thresh</name>
      <anchorfile>cont__ad_8h.html</anchorfile>
      <anchor>a382fe6375eae57a532c524d68bc3dd24</anchor>
      <arglist>(cont_ad_t *r, int32 silence, int32 speech)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>err.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>err_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>E_FATAL</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a1a4495946ab2449d61108fe829a94613</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_FATAL_SYSTEM</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a5229a1d58f5f5e69963a8d038ff5bc3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_WARN_SYSTEM</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a63de511eaca101291914f701e67c5c44</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_ERROR_SYSTEM</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a54ffbfe898d74595c586a1f48f32ef03</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_INFO</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>ac3c705943d946708cea0a1443be1c853</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_INFOCONT</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>ae5a17ac5be8c738d3d977b1bea2d4538</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_INFO_NOFN</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>ad95ccef073dd6f3c81c84e6aedca1f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_WARN</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a6a794bec721b555ac1f2167f9e12f662</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_ERROR</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a5f7b2f58f5a663a6bdd51f197ae21993</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_DEBUG</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>af46f94d0e21f22f1153f8f1cd9a372d6</anchor>
      <arglist>(level, x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>E_DEBUGCONT</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a7e8c4b068434a0424751fc2d2c457807</anchor>
      <arglist>(level, x)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>_E__pr_header</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a96379bbd8a6c62698d166e5d12f3370d</anchor>
      <arglist>(char const *file, long line, char const *msg)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>_E__pr_debug_header</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a173ee0173de4543e08d9d7a38ce18b88</anchor>
      <arglist>(char const *file, long line, int level)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>_E__pr_info_header</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a583592f006ae14756c0c4812048c9b5f</anchor>
      <arglist>(char const *file, long line, char const *tag)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>_E__pr_info_header_wofn</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>abb0389e05db688aee439b339f7f6ed89</anchor>
      <arglist>(char const *msg)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>_E__pr_warn</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a3c2a4f988b27b2fa9baaa8ecd3f1e61f</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>_E__pr_info</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a04fbf9d2c44e4e72f64cd3e2f5a24c38</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>_E__die_error</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>ae2149bb7cde661a9bee0bdaaea7fab2d</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>_E__abort_error</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a0cdeb87987f0c30cd0c99826f9a1f7a8</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>_E__sys_error</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a750133ab0eeba2bceba2a4054469857b</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>_E__fatal_sys_error</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a39faf53d575084585f79fe685943e95a</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT FILE *</type>
      <name>err_set_logfp</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a8bac37b001e58048b9f52ea1c756fc08</anchor>
      <arglist>(FILE *logfp)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT FILE *</type>
      <name>err_get_logfp</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a9707012f263e46ea66e93349313ddbe6</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>err_set_logfile</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>aa605de73499066475ec4cfb03e4c5a20</anchor>
      <arglist>(char const *file)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>err_set_debug_level</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>ab77fa009824260d9f103308272dc89b8</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>err_get_debug_level</name>
      <anchorfile>err_8h.html</anchorfile>
      <anchor>a1500dc011016aa15244d0d7f2fe66a7e</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>feat.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>feat_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <includes id="cmn_8h" name="cmn.h" local="no" imported="no">sphinxbase/cmn.h</includes>
    <includes id="agc_8h" name="agc.h" local="no" imported="no">sphinxbase/agc.h</includes>
    <class kind="struct">feat_s</class>
    <member kind="define">
      <type>#define</type>
      <name>LIVEBUFBLOCKSIZE</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a0e0d4a6b5ad951229bec259ce9637325</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>S3_MAX_FRAMES</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a7858f0e32903e11a6cb9d659ad4f6542</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cepstral_to_feature_command_line_macro</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>ada461d1a4db89192fbd7d8a7e15ca22d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_name</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a196b41ab9dfffcea885ee1a9075ede9e</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_cepsize</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>ac691993ec890de3daefbcffe89788f5a</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_window_size</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a69cdcd91578c26565c7653ad6f2eb510</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_n_stream</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a1fe686c88d5b0598d7509af21acd9b76</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_stream_len</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a3d50283fc416fff87f3b907a12c2c11e</anchor>
      <arglist>(f, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_dimension1</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>abadd19e2cc72df33e81e9d73a7ddffdb</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_dimension2</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a5bd29a80c7f23f281d55555757f97f34</anchor>
      <arglist>(f, i)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_dimension</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a66dc16aeea4307bf36ec4e08e05d0c7c</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>feat_stream_lengths</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>afc74f6114cc2151cef1c9e40bdd45e46</anchor>
      <arglist>(f)</arglist>
    </member>
    <member kind="typedef">
      <type>struct feat_s</type>
      <name>feat_t</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>acce3586bdd820afe9518147a6ada8bd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32 **</type>
      <name>parse_subvecs</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a613aca09a7f45f5ddc550efe685cb83b</anchor>
      <arglist>(char const *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>subvecs_free</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>ad209a1028b315a96a3a2447eccdb8605</anchor>
      <arglist>(int32 **subvecs)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT mfcc_t ***</type>
      <name>feat_array_alloc</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a03071d6d5c6b233117871f583c258b1e</anchor>
      <arglist>(feat_t *fcb, int32 nfr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT mfcc_t ***</type>
      <name>feat_array_realloc</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>aba5f4070ae18062a19c5abac3ba1ac89</anchor>
      <arglist>(feat_t *fcb, mfcc_t ***old_feat, int32 ofr, int32 nfr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>feat_array_free</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>ad5c87f80af670b7a949af65bc3ba82a8</anchor>
      <arglist>(mfcc_t ***feat)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT feat_t *</type>
      <name>feat_init</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a7a5e2e02e99e368e1e9e3b1ded35e3dc</anchor>
      <arglist>(char const *type, cmn_type_t cmn, int32 varnorm, agc_type_t agc, int32 breport, int32 cepsize)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>feat_read_lda</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a7639fbc34e3328d7e3259e61372c64b8</anchor>
      <arglist>(feat_t *feat, const char *ldafile, int32 dim)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>feat_lda_transform</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a7452702cb435ea9244c7e1f61bbf5da1</anchor>
      <arglist>(feat_t *fcb, mfcc_t ***inout_feat, uint32 nfr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>feat_set_subvecs</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a9a79c7278d484fa8178cd7c06156b794</anchor>
      <arglist>(feat_t *fcb, int32 **subvecs)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>feat_print</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>afeaef030a5ec32c2164b5bd55e912714</anchor>
      <arglist>(feat_t *fcb, mfcc_t ***feat, int32 nfr, FILE *fp)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>feat_s2mfc2feat</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a918e21c2b28a6951a83c64f7023126a7</anchor>
      <arglist>(feat_t *fcb, const char *file, const char *dir, const char *cepext, int32 sf, int32 ef, mfcc_t ***feat, int32 maxfr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>feat_s2mfc2feat_live</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a68bf7d2c15e3f76b08833449eb254aed</anchor>
      <arglist>(feat_t *fcb, mfcc_t **uttcep, int32 *inout_ncep, int32 beginutt, int32 endutt, mfcc_t ***ofeat)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT feat_t *</type>
      <name>feat_retain</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a80d6eabf01ff119d324a07c1de8fda80</anchor>
      <arglist>(feat_t *f)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>feat_free</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>a98463b4ab5fe4265fc817523b0e25ee9</anchor>
      <arglist>(feat_t *f)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>feat_report</name>
      <anchorfile>feat_8h.html</anchorfile>
      <anchor>ae3e67bd629f9756ddb6c5a599d223f6e</anchor>
      <arglist>(feat_t *f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>filename.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>filename_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>path2basename</name>
      <anchorfile>filename_8h.html</anchorfile>
      <anchor>ad8a88d52ec0af498bc126a90871b2efe</anchor>
      <arglist>(const char *path, char *base)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>path2dirname</name>
      <anchorfile>filename_8h.html</anchorfile>
      <anchor>a678be92ddb74695f26a9e4f527b073b0</anchor>
      <arglist>(const char *path, char *dir)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>strip_fileext</name>
      <anchorfile>filename_8h.html</anchorfile>
      <anchor>ad40b54252813d276ff2ebb097b242657</anchor>
      <arglist>(const char *file, char *root)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>path_is_absolute</name>
      <anchorfile>filename_8h.html</anchorfile>
      <anchor>ac59add2db73b33e81b354de114268e7a</anchor>
      <arglist>(const char *file)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>genrand.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>genrand_8h</filename>
    <member kind="define">
      <type>#define</type>
      <name>S3_RAND_MAX_INT32</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>a29d6253e4a57e7c4d56cf7f6155b4007</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>s3_rand_seed</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>a88ed88daecb88e115d8559c1b0a09bb7</anchor>
      <arglist>(s)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>s3_rand_int31</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>a3dcc058023a95c0a0ca1f12d1fdec9b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>s3_rand_real</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>a85a5844eace98dcbb4742d408a75d5e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>s3_rand_res53</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>a226b9a1deec002aeb1f1775b830a3062</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>genrand_seed</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>a2881c7b606d9a2b2852e5946d71d32b7</anchor>
      <arglist>(unsigned long s)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT long</type>
      <name>genrand_int31</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>a10263695978c84103fb3526fdae21d4c</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT double</type>
      <name>genrand_real3</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>ad5fbfda1cb738d2beff277444bc71b1a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT double</type>
      <name>genrand_res53</name>
      <anchorfile>genrand_8h.html</anchorfile>
      <anchor>a2fca03c5dad1835f55e09c6e66d3b960</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>glist.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>glist_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <class kind="struct">gnode_s</class>
    <member kind="define">
      <type>#define</type>
      <name>gnode_ptr</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>ace56682f14d84cc456c805d26fd86734</anchor>
      <arglist>(g)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gnode_int32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a7daab0205c40d1b449529ee4cc54522b</anchor>
      <arglist>(g)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gnode_uint32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a3af0cc8d5d612e85fa433ac3edf42fd6</anchor>
      <arglist>(g)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gnode_float32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>aaf6a2bdc69642303426c20fc0bdfa5f6</anchor>
      <arglist>(g)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gnode_float64</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>abfea8eee77afc1e3046ef33ae6c0f5b4</anchor>
      <arglist>(g)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>gnode_next</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a33fc794db097ba2a5a36eba12c418993</anchor>
      <arglist>(g)</arglist>
    </member>
    <member kind="typedef">
      <type>struct gnode_s</type>
      <name>gnode_t</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a35eee566c2974c9a3e3055daf1611793</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gnode_t *</type>
      <name>glist_t</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a576a9ce77a5af8b912e75b32bce607f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT glist_t</type>
      <name>glist_add_ptr</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a77a9c20b7df5a289477af405ab778377</anchor>
      <arglist>(glist_t g, void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT glist_t</type>
      <name>glist_add_int32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a28adfcc24a784aaed1a0b3c4c4de4c42</anchor>
      <arglist>(glist_t g, int32 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT glist_t</type>
      <name>glist_add_uint32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>aeb741d435322f34df5e5d3a99abf00de</anchor>
      <arglist>(glist_t g, uint32 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT glist_t</type>
      <name>glist_add_float32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a4fc4db2fbebd7b659554227d411f6737</anchor>
      <arglist>(glist_t g, float32 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT glist_t</type>
      <name>glist_add_float64</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a5bdd11639ef5846abb7ceb6caf059f4e</anchor>
      <arglist>(glist_t g, float64 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT gnode_t *</type>
      <name>glist_insert_ptr</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a2d641da6b349c1c939e3b954382513ba</anchor>
      <arglist>(gnode_t *gn, void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT gnode_t *</type>
      <name>glist_insert_int32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a327b6478ee05ac17e3c3b3189579413e</anchor>
      <arglist>(gnode_t *gn, int32 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT gnode_t *</type>
      <name>glist_insert_uint32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>ab7e58ee641d3648f047eef70a20a4647</anchor>
      <arglist>(gnode_t *gn, uint32 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT gnode_t *</type>
      <name>glist_insert_float32</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>aff08aed022168872fc9d30cd299df2ce</anchor>
      <arglist>(gnode_t *gn, float32 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT gnode_t *</type>
      <name>glist_insert_float64</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a97a682e38319dd8f67765732467110f9</anchor>
      <arglist>(gnode_t *gn, float64 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT glist_t</type>
      <name>glist_reverse</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a399a2a093c6c4ce1012762e4c25c8185</anchor>
      <arglist>(glist_t g)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>glist_count</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>aeb046e39c540d2f5f792119ea0d24c48</anchor>
      <arglist>(glist_t g)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>glist_free</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a45380e15d2c33afc554fd60a8828580c</anchor>
      <arglist>(glist_t g)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT gnode_t *</type>
      <name>gnode_free</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a68b51aea4de463b284a19668a713d502</anchor>
      <arglist>(gnode_t *gn, gnode_t *pred)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT gnode_t *</type>
      <name>glist_tail</name>
      <anchorfile>glist_8h.html</anchorfile>
      <anchor>a6921d6b8b11cb9e05fadeaa091e89234</anchor>
      <arglist>(glist_t g)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hash_table.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>hash__table_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <includes id="glist_8h" name="glist.h" local="no" imported="no">sphinxbase/glist.h</includes>
    <class kind="struct">hash_entry_s</class>
    <class kind="struct">hash_table_t</class>
    <class kind="struct">hash_iter_s</class>
    <member kind="define">
      <type>#define</type>
      <name>hash_entry_val</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>ac98525ff8ec582358783aecbd388842d</anchor>
      <arglist>(e)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_entry_key</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>aa9ff378b212469b2ec6dde13b6f0934b</anchor>
      <arglist>(e)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_entry_len</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a4c0d92dd662edb83d572dc2fef278816</anchor>
      <arglist>(e)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_table_inuse</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a47264dff359c0a0d4c144e54d0819ce9</anchor>
      <arglist>(h)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_table_size</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>aa0d9d0efddc207e3d7be3c417dcd7128</anchor>
      <arglist>(h)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HASH_CASE_YES</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a30fbbcfa2a2d360c2a8960b960ae34a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>HASH_CASE_NO</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>aec1a9795611575f717b08d2bad5d6f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_table_enter_int32</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a393c56322e54607a48e6bc61169d92bf</anchor>
      <arglist>(h, k, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_table_replace_int32</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a4286033aa772a9d1f3aa219469324f5b</anchor>
      <arglist>(h, k, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_table_enter_bkey_int32</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>ada31c1e0bcf359a7ca934748f4680333</anchor>
      <arglist>(h, k, l, v)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>hash_table_replace_bkey_int32</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>ace238b264acacb8e6cb0de14f1035f53</anchor>
      <arglist>(h, k, l, v)</arglist>
    </member>
    <member kind="typedef">
      <type>struct hash_entry_s</type>
      <name>hash_entry_t</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>af70e2b25a853da786ffd99731a5fac5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct hash_iter_s</type>
      <name>hash_iter_t</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a8febad57d856465fb33dd11cabc57dcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT hash_table_t *</type>
      <name>hash_table_new</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a56d93e8c03e066b77377ac6eab50cfae</anchor>
      <arglist>(int32 size, int32 casearg)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>hash_table_free</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a0a588c22946f8cc16328973035ed19e3</anchor>
      <arglist>(hash_table_t *h)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>hash_table_enter</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>aebfe63c3869c271b125a8413ee384412</anchor>
      <arglist>(hash_table_t *h, const char *key, void *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>hash_table_replace</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>ae61b28ea189a98ef8f2a3c5521482968</anchor>
      <arglist>(hash_table_t *h, const char *key, void *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>hash_table_delete</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>af1d87b1b825c302473f2d7c5a3b88475</anchor>
      <arglist>(hash_table_t *h, const char *key)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>hash_table_delete_bkey</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>aa2ab1f5eb2f1b4689645d1e1c19dc887</anchor>
      <arglist>(hash_table_t *h, const char *key, size_t len)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>hash_table_empty</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>acab374d21e25009d397642e3465308c7</anchor>
      <arglist>(hash_table_t *h)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>hash_table_enter_bkey</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a6f5752fadefe2662adb2c141f1511062</anchor>
      <arglist>(hash_table_t *h, const char *key, size_t len, void *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>hash_table_replace_bkey</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a273237d63833e5625c830f421d9463de</anchor>
      <arglist>(hash_table_t *h, const char *key, size_t len, void *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>hash_table_lookup</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a9a1e5ed410eb96f514b00fdce770fbd7</anchor>
      <arglist>(hash_table_t *h, const char *key, void **val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>hash_table_lookup_int32</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>acaf27e8e7e336faf6653649937c42ed8</anchor>
      <arglist>(hash_table_t *h, const char *key, int32 *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>hash_table_lookup_bkey</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a91f5b3924c0e3a50f94c86bb5fd078e8</anchor>
      <arglist>(hash_table_t *h, const char *key, size_t len, void **val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>hash_table_lookup_bkey_int32</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>acc530eda0b105745cf3a47cc3c1148e4</anchor>
      <arglist>(hash_table_t *h, const char *key, size_t len, int32 *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT hash_iter_t *</type>
      <name>hash_table_iter</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>aae6e6373d3c371d57861a9a875edb207</anchor>
      <arglist>(hash_table_t *h)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT hash_iter_t *</type>
      <name>hash_table_iter_next</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>ad023321efab26a30bd6d855fbdbe08a3</anchor>
      <arglist>(hash_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>hash_table_iter_free</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a7aa43b228d7dc24f5221d281debeb025</anchor>
      <arglist>(hash_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT glist_t</type>
      <name>hash_table_tolist</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a61f59389f05d8871003da4692a9c2acc</anchor>
      <arglist>(hash_table_t *h, int32 *count)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>hash_table_display</name>
      <anchorfile>hash__table_8h.html</anchorfile>
      <anchor>a2721f6b601c80ceeeae570589fd12e38</anchor>
      <arglist>(hash_table_t *h, int32 showkey)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>heap.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>heap_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <member kind="typedef">
      <type>struct heap_s</type>
      <name>heap_t</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>a0ffa4ec8648c254bf19eee352b69dc7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT heap_t *</type>
      <name>heap_new</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>a9bc21333ce58caaf58e802d8b0190efd</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>heap_insert</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>a64bcded2de5086c5d246ff760caa74a3</anchor>
      <arglist>(heap_t *heap, void *data, int32 val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>heap_top</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>ae70da6b59215654c2cd5ec177eaf2aec</anchor>
      <arglist>(heap_t *heap, void **data, int32 *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>heap_pop</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>a387c8913b4c62ad1a5c4702a4e6dbdbf</anchor>
      <arglist>(heap_t *heap, void **data, int32 *val)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>heap_remove</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>aa2dbc059f9707e434098694e8c69157e</anchor>
      <arglist>(heap_t *heap, void *data)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT size_t</type>
      <name>heap_size</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>a1c713d67123e96974505edfa4346cb0f</anchor>
      <arglist>(heap_t *heap)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>heap_destroy</name>
      <anchorfile>heap_8h.html</anchorfile>
      <anchor>ab12b1efd6392eb574d2da9c981e7320c</anchor>
      <arglist>(heap_t *heap)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>huff_code.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>huff__code_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <includes id="cmd__ln_8h" name="cmd_ln.h" local="no" imported="no">sphinxbase/cmd_ln.h</includes>
    <member kind="typedef">
      <type>struct huff_code_s</type>
      <name>huff_code_t</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>a99a5188e6a18682c96100cd5232af0f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT huff_code_t *</type>
      <name>huff_code_build_int</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>a278b925caf4f2c93cbb63adc8f77bfa6</anchor>
      <arglist>(int32 const *values, int32 const *frequencies, int nvals)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT huff_code_t *</type>
      <name>huff_code_build_str</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>af5d0c85a2ad206c277ecde2a085af790</anchor>
      <arglist>(char *const *values, int32 const *frequencies, int nvals)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT huff_code_t *</type>
      <name>huff_code_read</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>a873745b79dac884cbb1b5bdf12e069e6</anchor>
      <arglist>(FILE *infh)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>huff_code_write</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>a6b91641e852a8eb4c4d32f40ff6dd055</anchor>
      <arglist>(huff_code_t *hc, FILE *outfh)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>huff_code_dump</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>a821658831cbe9b1199c756435d0ad4aa</anchor>
      <arglist>(huff_code_t *hc, FILE *dumpfh)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT huff_code_t *</type>
      <name>huff_code_retain</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>a26a70d1b1704f1af985e67127e622a7b</anchor>
      <arglist>(huff_code_t *hc)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>huff_code_free</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>ac8678d07a65af1963cc0b3bd8b10d646</anchor>
      <arglist>(huff_code_t *hc)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT FILE *</type>
      <name>huff_code_attach</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>a9698821197737e3e1be9533a3059c82c</anchor>
      <arglist>(huff_code_t *hc, FILE *fh, char const *mode)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT FILE *</type>
      <name>huff_code_detach</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>a403f575701c1d5fd2ddef1d001cf53e3</anchor>
      <arglist>(huff_code_t *hc)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>huff_code_encode_int</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>acf369555b8784eee944f7ebc97b6b825</anchor>
      <arglist>(huff_code_t *hc, int32 sym, uint32 *outcw)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>huff_code_encode_str</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>a24fe76f501a7a0485f3e9485c60fae32</anchor>
      <arglist>(huff_code_t *hc, char const *sym, uint32 *outcw)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>huff_code_decode_int</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>a9155dd07a0a24393ef0e4e66cb314140</anchor>
      <arglist>(huff_code_t *hc, int *outval, char const **inout_data, size_t *inout_data_len, int *inout_offset)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char const *</type>
      <name>huff_code_decode_str</name>
      <anchorfile>huff__code_8h.html</anchorfile>
      <anchor>aec0908ece3a695f8a3f6619d8d726e57</anchor>
      <arglist>(huff_code_t *hc, char const **inout_data, size_t *inout_data_len, int *inout_offset)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>info.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>info_8h</filename>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>print_appl_info</name>
      <anchorfile>info_8h.html</anchorfile>
      <anchor>a997bdb77d55433471acc38ea58bc34ce</anchor>
      <arglist>(char *appl_name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jsgf.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>jsgf_8h</filename>
    <includes id="hash__table_8h" name="hash_table.h" local="no" imported="no">sphinxbase/hash_table.h</includes>
    <includes id="logmath_8h" name="logmath.h" local="no" imported="no">sphinxbase/logmath.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>jsgf_rule_iter_next</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a7216bc3a99823fb509e0dd4f8ee02b75</anchor>
      <arglist>(itor)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>jsgf_rule_iter_rule</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a23b17eb0a92ba7e3c4aa086a33e3c5e6</anchor>
      <arglist>(itor)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>jsgf_rule_iter_free</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a697875f60dede64c607180514e4ab2c4</anchor>
      <arglist>(itor)</arglist>
    </member>
    <member kind="typedef">
      <type>struct jsgf_s</type>
      <name>jsgf_t</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>aee85cf9f007eac61cebba97d6aaccaea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct jsgf_rule_s</type>
      <name>jsgf_rule_t</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a3bb0c86e5f9ba2c29b1fa91e1583bf00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hash_iter_t</type>
      <name>jsgf_rule_iter_t</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>ac1e450c03748feb7e1db2a487b21c3fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT jsgf_t *</type>
      <name>jsgf_grammar_new</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a504181dfffafe125df5763e4b841b658</anchor>
      <arglist>(jsgf_t *parent)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT jsgf_t *</type>
      <name>jsgf_parse_file</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>ac67cab54fdb6ead62a3be79ccffb0836</anchor>
      <arglist>(const char *filename, jsgf_t *parent)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char const *</type>
      <name>jsgf_grammar_name</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a657b5dd6f51f3a034572c8ba57bed1d8</anchor>
      <arglist>(jsgf_t *jsgf)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>jsgf_grammar_free</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a8bbbd8834e0248bd8c52252e93c9822b</anchor>
      <arglist>(jsgf_t *jsgf)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT jsgf_rule_iter_t *</type>
      <name>jsgf_rule_iter</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a9617a53c34041e32f0800795aa1341ca</anchor>
      <arglist>(jsgf_t *grammar)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT jsgf_rule_t *</type>
      <name>jsgf_get_rule</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a0329f14f22c4253c975a448dc5e0c3ec</anchor>
      <arglist>(jsgf_t *grammar, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char const *</type>
      <name>jsgf_rule_name</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>ab1e5791530b5075f76ab085f248e8f0f</anchor>
      <arglist>(jsgf_rule_t *rule)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>jsgf_rule_public</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a85d7895c7a11d82c85b4529f6009c213</anchor>
      <arglist>(jsgf_rule_t *rule)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT fsg_model_t *</type>
      <name>jsgf_build_fsg</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>ac355893a25aa071eba6874fae1d51ad2</anchor>
      <arglist>(jsgf_t *grammar, jsgf_rule_t *rule, logmath_t *lmath, float32 lw)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT fsg_model_t *</type>
      <name>jsgf_build_fsg_raw</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a5873c31ddf99379d123c0db2e36600ba</anchor>
      <arglist>(jsgf_t *grammar, jsgf_rule_t *rule, logmath_t *lmath, float32 lw)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT fsg_model_t *</type>
      <name>jsgf_read_file</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>a5ed2b423b8ecacdda900e0b1e28b4e46</anchor>
      <arglist>(const char *file, logmath_t *lmath, float32 lw)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>jsgf_write_fsg</name>
      <anchorfile>jsgf_8h.html</anchorfile>
      <anchor>abc18712a5a7bda442a8afba38f5827e7</anchor>
      <arglist>(jsgf_t *grammar, jsgf_rule_t *rule, FILE *outfh)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>listelem_alloc.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>listelem__alloc_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>listelem_malloc</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>ad0c40e65d9cca0d7ec08fcf416b09af2</anchor>
      <arglist>(le)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>listelem_malloc_id</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>aa9bbb7161aceacdba49b41b189554507</anchor>
      <arglist>(le, oid)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>listelem_free</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>a67de661d7ca552347fa6f03005e25d74</anchor>
      <arglist>(le, el)</arglist>
    </member>
    <member kind="typedef">
      <type>struct listelem_alloc_s</type>
      <name>listelem_alloc_t</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>a3fd3950d7834feaa2bbdf84afb98ce32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT listelem_alloc_t *</type>
      <name>listelem_alloc_init</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>a4b08b49eaa74cbe9a3c95170cee78de7</anchor>
      <arglist>(size_t elemsize)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>listelem_alloc_free</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>a94c02e93a0abaa2bd79636cbac6cced2</anchor>
      <arglist>(listelem_alloc_t *le)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>__listelem_malloc__</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>a04e5512f4dcedc2e84e58108bf61f1ff</anchor>
      <arglist>(listelem_alloc_t *le, char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>__listelem_malloc_id__</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>a45f35edbe5f23773b1624f2ca2ac5e86</anchor>
      <arglist>(listelem_alloc_t *le, char *file, int line, int32 *out_id)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>listelem_get_item</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>a74e610ac90e2b0696b2aedef4289d8f3</anchor>
      <arglist>(listelem_alloc_t *le, int32 id)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>__listelem_free__</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>ab83a7a6fd086c14140ad2c8c4162709b</anchor>
      <arglist>(listelem_alloc_t *le, void *elem, char *file, int line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>listelem_stats</name>
      <anchorfile>listelem__alloc_8h.html</anchorfile>
      <anchor>a838d9361ba76a89a834a7ea6a185b57d</anchor>
      <arglist>(listelem_alloc_t *le)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>logmath.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>logmath_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <includes id="cmd__ln_8h" name="cmd_ln.h" local="no" imported="no">sphinxbase/cmd_ln.h</includes>
    <class kind="struct">logadd_s</class>
    <member kind="define">
      <type>#define</type>
      <name>LOGMATH_TABLE</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>ae5c5ce106e9f8f1e763d419de53317a8</anchor>
      <arglist>(lm)</arglist>
    </member>
    <member kind="typedef">
      <type>struct logadd_s</type>
      <name>logadd_t</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a8c04c94e2c6364f6cf3b649eb4ce5bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct logmath_s</type>
      <name>logmath_t</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>ae613aa7db1dd40ff56a80a7dadb22cc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT logmath_t *</type>
      <name>logmath_init</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a5835860c5f6a703c80c0214f816f0b11</anchor>
      <arglist>(float64 base, int shift, int use_table)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT logmath_t *</type>
      <name>logmath_read</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>afbed298ba0bc4736415d78880fe5c7c2</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>logmath_write</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a787070f5e689878348ef219245fc7c44</anchor>
      <arglist>(logmath_t *lmath, const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>logmath_get_table_shape</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a3280500e77bf27aa7cda23268b8eb8b3</anchor>
      <arglist>(logmath_t *lmath, uint32 *out_size, uint32 *out_width, uint32 *out_shift)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float64</type>
      <name>logmath_get_base</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a6114206ec0321d7015c42fc7b81cb83e</anchor>
      <arglist>(logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_get_zero</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a1c160c28a9e7d25923f391773b1028c0</anchor>
      <arglist>(logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_get_width</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a0cd690d2a414aebb5e126b8cabbfabde</anchor>
      <arglist>(logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_get_shift</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>aed009aca9736612bebdda57444ec63a6</anchor>
      <arglist>(logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT logmath_t *</type>
      <name>logmath_retain</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a1c1b2ba3b137a39e9e835a8f3e27d381</anchor>
      <arglist>(logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_free</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a97865ef8bc1e8e2525a2329e0627ecfb</anchor>
      <arglist>(logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_add_exact</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a61bf79c70a38f00ca060b69b0efd7489</anchor>
      <arglist>(logmath_t *lmath, int logb_p, int logb_q)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_add</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a5eb70928578b0115c9c7ac2765396a06</anchor>
      <arglist>(logmath_t *lmath, int logb_p, int logb_q)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_log</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>aebb4711268322fa7aec31e5798fe7e90</anchor>
      <arglist>(logmath_t *lmath, float64 p)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float64</type>
      <name>logmath_exp</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>ae8b0a168e29e448c0d6de66dc46e099e</anchor>
      <arglist>(logmath_t *lmath, int logb_p)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_ln_to_log</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a52eff2c778ad758888b03ac5efcdccea</anchor>
      <arglist>(logmath_t *lmath, float64 log_p)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float64</type>
      <name>logmath_log_to_ln</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a8035e176636eae8b4e02fe488f25457a</anchor>
      <arglist>(logmath_t *lmath, int logb_p)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>logmath_log10_to_log</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>aacb4dddeed63a61fb927915f7e3a642e</anchor>
      <arglist>(logmath_t *lmath, float64 log_p)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float64</type>
      <name>logmath_log_to_log10</name>
      <anchorfile>logmath_8h.html</anchorfile>
      <anchor>a7c17cb624003975e84fbd141ca6e2e06</anchor>
      <arglist>(logmath_t *lmath, int logb_p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>matrix.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>matrix_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>norm_3d</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>af209fc89926fd184f5a02919ec7c9818</anchor>
      <arglist>(float32 ***arr, uint32 d1, uint32 d2, uint32 d3)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>accum_3d</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>abf02a99f3dac599148c0e1ee5640b568</anchor>
      <arglist>(float32 ***out, float32 ***in, uint32 d1, uint32 d2, uint32 d3)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>band_nz_1d</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>a859d32f6b8e86fb215f676245c8deeaf</anchor>
      <arglist>(float32 *v, uint32 d1, float32 band)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>floor_nz_3d</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>a7b18b907fca64a8057f7406b8996d9c9</anchor>
      <arglist>(float32 ***m, uint32 d1, uint32 d2, uint32 d3, float32 floor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>floor_nz_1d</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>a0ec7000944b98cce317e0b63ce437b99</anchor>
      <arglist>(float32 *v, uint32 d1, float32 floor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float64</type>
      <name>determinant</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>a0c810028195f6078c9e99f3b5c29c42b</anchor>
      <arglist>(float32 **a, int32 len)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>invert</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>aa20f437dbe9fcd6f0adda31f181bfbea</anchor>
      <arglist>(float32 **out_ainv, float32 **a, int32 len)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>solve</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>a174a82dac39a15828af6c87edcba3708</anchor>
      <arglist>(float32 **a, float32 *b, float32 *out_x, int32 n)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>outerproduct</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>aa2d31d63ec277fd389d4ef51d3b2bc2b</anchor>
      <arglist>(float32 **out_a, float32 *x, float32 *y, int32 len)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>matrixmultiply</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>acaaf5d2c02d9d12f10abc462ac65cde9</anchor>
      <arglist>(float32 **out_c, float32 **a, float32 **b, int32 n)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>scalarmultiply</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>adc8ee5f4e4792328e4f33309bc99ebfb</anchor>
      <arglist>(float32 **inout_a, float32 x, int32 n)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>matrixadd</name>
      <anchorfile>matrix_8h.html</anchorfile>
      <anchor>a545d251a51cc473bad38a83b2a05f61c</anchor>
      <arglist>(float32 **inout_a, float32 **b, int32 n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mmio.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>mmio_8h</filename>
    <member kind="typedef">
      <type>struct mmio_file_s</type>
      <name>mmio_file_t</name>
      <anchorfile>mmio_8h.html</anchorfile>
      <anchor>ae27ed04d8142d77aae885c8cb8c9fa3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT mmio_file_t *</type>
      <name>mmio_file_read</name>
      <anchorfile>mmio_8h.html</anchorfile>
      <anchor>ae3367a51a50a6108178ecfdd6c983c61</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>mmio_file_ptr</name>
      <anchorfile>mmio_8h.html</anchorfile>
      <anchor>a5e6d8bf5cd7785563abc18c70a31ce0d</anchor>
      <arglist>(mmio_file_t *mf)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>mmio_file_unmap</name>
      <anchorfile>mmio_8h.html</anchorfile>
      <anchor>a341a9c1cc8a3c4bddfd2d29a1b0993f6</anchor>
      <arglist>(mmio_file_t *mf)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mulaw.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>mulaw_8h</filename>
  </compound>
  <compound kind="file">
    <name>ngram_model.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>ngram__model_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <includes id="cmd__ln_8h" name="cmd_ln.h" local="no" imported="no">sphinxbase/cmd_ln.h</includes>
    <includes id="logmath_8h" name="logmath.h" local="no" imported="no">sphinxbase/logmath.h</includes>
    <includes id="mmio_8h" name="mmio.h" local="no" imported="no">sphinxbase/mmio.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>NGRAM_INVALID_WID</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a3d4b3dddd0ff67e13d30c9bf053d01ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ngram_model_s</type>
      <name>ngram_model_t</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>afaaf0c00e20056d97efcd97e4cae4ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ngram_class_s</type>
      <name>ngram_class_t</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ae36b2f037b2ea751dff23f082379c264</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum ngram_file_type_e</type>
      <name>ngram_file_type_t</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a0e7d02703c48237b2afea436392dcb82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>enum ngram_case_e</type>
      <name>ngram_case_t</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ab9b3023d92b99927d1e851108ac3bdad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ngram_iter_s</type>
      <name>ngram_iter_t</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ac7de090a02fa12a8bba84abb4d5236aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct ngram_model_set_iter_s</type>
      <name>ngram_model_set_iter_t</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>afffd75c5bde8dd84107449468be48547</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ngram_file_type_e</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a406c0d64c15a9d1749d07c8ab6e0ae74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NGRAM_INVALID</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a406c0d64c15a9d1749d07c8ab6e0ae74a2cf596c8b0c63a3a0ba1fe33326cc796</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NGRAM_AUTO</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a406c0d64c15a9d1749d07c8ab6e0ae74a441701bf8ae0a2b79716feb31b5f257a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NGRAM_ARPA</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a406c0d64c15a9d1749d07c8ab6e0ae74a77ef2341d826b3cc8b836e3af1efba99</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NGRAM_DMP</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a406c0d64c15a9d1749d07c8ab6e0ae74addfc3620d0fbc6f05f7f8e455245dd92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NGRAM_DMP32</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a406c0d64c15a9d1749d07c8ab6e0ae74ab8fe83d2dec88c1c8cb4d82a8a528bb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ngram_case_e</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>aad16a0a1edf29ba8c0df43959c0c4771</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_read</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ab0c840f2bdfc38cea08bb70054f76624</anchor>
      <arglist>(cmd_ln_t *config, const char *file_name, ngram_file_type_t file_type, logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>ngram_model_write</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ac8ff04e1bccbef23bde9e81fb61c57fe</anchor>
      <arglist>(ngram_model_t *model, const char *file_name, ngram_file_type_t format)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_file_type_t</type>
      <name>ngram_file_name_to_type</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ad758d3f491d501bdec2ada8088e9b656</anchor>
      <arglist>(const char *file_name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_file_type_t</type>
      <name>ngram_str_to_type</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>affb3d938049e58c191e72858a7191e9c</anchor>
      <arglist>(const char *str_name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char const *</type>
      <name>ngram_type_to_str</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a992b8a8d7f623e2662ae94991f6aec55</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_retain</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a046e6ff8cd8787e412400534a9649a81</anchor>
      <arglist>(ngram_model_t *model)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>ngram_model_free</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>aec73d28e7285e539a0b44a7ac0cbe489</anchor>
      <arglist>(ngram_model_t *model)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>ngram_model_recode</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>aac2b3fd054597c2fdfbb59db97d72ec0</anchor>
      <arglist>(ngram_model_t *model, const char *from, const char *to)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>ngram_model_casefold</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a41b938a2c4b129dc0df37b2312d65506</anchor>
      <arglist>(ngram_model_t *model, int kase)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>ngram_model_apply_weights</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>aa4b8d7c1f3d873b8458c0cfee13af4da</anchor>
      <arglist>(ngram_model_t *model, float32 lw, float32 wip, float32 uw)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT float32</type>
      <name>ngram_model_get_weights</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a30170c1307e065e1f7159a04f75df304</anchor>
      <arglist>(ngram_model_t *model, int32 *out_log_wip, int32 *out_log_uw)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_score</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a9c23d79885af400e17ac2a1b7169660d</anchor>
      <arglist>(ngram_model_t *model, const char *word,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_tg_score</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a0f8ad53c1a7cab528113b74aad00f15a</anchor>
      <arglist>(ngram_model_t *model, int32 w3, int32 w2, int32 w1, int32 *n_used)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_bg_score</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a8c06698fbcb0ef82420088ace045ae81</anchor>
      <arglist>(ngram_model_t *model, int32 w2, int32 w1, int32 *n_used)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_ng_score</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a6ac5799e78ea4ad82a11e2439016471e</anchor>
      <arglist>(ngram_model_t *model, int32 wid, int32 *history, int32 n_hist, int32 *n_used)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_prob</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a68cfda3f503e1a4a87f08aa5a3a5ea88</anchor>
      <arglist>(ngram_model_t *model, const char *word,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_ng_prob</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a218d8d140b93d3d8008f8933f9e04ec6</anchor>
      <arglist>(ngram_model_t *model, int32 wid, int32 *history, int32 n_hist, int32 *n_used)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_score_to_prob</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ae0cf3a94128927e2be6422d2de34f49b</anchor>
      <arglist>(ngram_model_t *model, int32 score)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_wid</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ad03d4355d4ea659815dc25bce8d83880</anchor>
      <arglist>(ngram_model_t *model, const char *word)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT const char *</type>
      <name>ngram_word</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a96e36290a005c03464ea6c637ccde2f5</anchor>
      <arglist>(ngram_model_t *model, int32 wid)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_unknown_wid</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a1469e9e1c8516a77c9ac1e248a61ef4e</anchor>
      <arglist>(ngram_model_t *model)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_zero</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ae401a87ad55ae64f286dcd83170f7100</anchor>
      <arglist>(ngram_model_t *model)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_get_size</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a462d374099a4fe8b3c3195b5e2013545</anchor>
      <arglist>(ngram_model_t *model)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32 const *</type>
      <name>ngram_model_get_counts</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a187531aafc1f11214c9d061f75eae194</anchor>
      <arglist>(ngram_model_t *model)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_iter_t *</type>
      <name>ngram_model_mgrams</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a12683dda2253dc45680102f02fbdb1e2</anchor>
      <arglist>(ngram_model_t *model, int m)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_iter_t *</type>
      <name>ngram_iter</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ad988e0f41447ee404050caf7c7bb7b63</anchor>
      <arglist>(ngram_model_t *model, const char *word,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_iter_t *</type>
      <name>ngram_ng_iter</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a461c6e5914ce463422dfeaeee377e024</anchor>
      <arglist>(ngram_model_t *model, int32 wid, int32 *history, int32 n_hist)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32 const *</type>
      <name>ngram_iter_get</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a240c738781daa226a2fc13395dbdb514</anchor>
      <arglist>(ngram_iter_t *itor, int32 *out_score, int32 *out_bowt)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_iter_t *</type>
      <name>ngram_iter_successors</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ae85f41e2defc5b65b12026d29cd4fdaa</anchor>
      <arglist>(ngram_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_iter_t *</type>
      <name>ngram_iter_next</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a3a2b285c01393b3ebddaec1fefed11a4</anchor>
      <arglist>(ngram_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ngram_iter_free</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ac9f746c8a5db78ef8b2fb7c312be4a22</anchor>
      <arglist>(ngram_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_add_word</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a38e034d58ee0d6a4c0dd6f852cb71c3c</anchor>
      <arglist>(ngram_model_t *model, const char *word, float32 weight)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_read_classdef</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a9b2a86c23543158754373c5456fe890d</anchor>
      <arglist>(ngram_model_t *model, const char *file_name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_add_class</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a0481b03a2bf03ef0a197da0a1f7d1caa</anchor>
      <arglist>(ngram_model_t *model, const char *classname, float32 classweight, char **words, const float32 *weights, int32 n_words)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_add_class_word</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a39eabb4994cf99c4bc2116e12af0c9f1</anchor>
      <arglist>(ngram_model_t *model, const char *classname, const char *word, float32 weight)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_init</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a02310e01a48928e1d430aef0ea3c9a99</anchor>
      <arglist>(cmd_ln_t *config, ngram_model_t **models, char **names, const float32 *weights, int32 n_models)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_read</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>afb7b13dbb4a3149b2fa9f7b15dbe35e8</anchor>
      <arglist>(cmd_ln_t *config, const char *lmctlfile, logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_set_count</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a22b8f5f49231b4aef3d5a166ea7155b6</anchor>
      <arglist>(ngram_model_t *set)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_set_iter_t *</type>
      <name>ngram_model_set_iter</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a880c7768b082a124e1b6f6f1a764b1e3</anchor>
      <arglist>(ngram_model_t *set)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_set_iter_t *</type>
      <name>ngram_model_set_iter_next</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a038a174f17632703cffce02611149265</anchor>
      <arglist>(ngram_model_set_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ngram_model_set_iter_free</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ae5b58f360ab6432528ffaead1d2b2a2d</anchor>
      <arglist>(ngram_model_set_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_iter_model</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a438592444037281175150e3cf1543052</anchor>
      <arglist>(ngram_model_set_iter_t *itor, char const **lmname)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_select</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a5e7a3fd20d32783ce07b760781f658f8</anchor>
      <arglist>(ngram_model_t *set, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_lookup</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a1797a53b95a2a1ca2a6be732918d9fa0</anchor>
      <arglist>(ngram_model_t *set, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT const char *</type>
      <name>ngram_model_set_current</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a95a4da1562cb6d67a01a733bd0bbb436</anchor>
      <arglist>(ngram_model_t *set)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_interp</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a8a4c853e77c6b48face3a781480e77d6</anchor>
      <arglist>(ngram_model_t *set, const char **names, const float32 *weights)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_add</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>aab34758e97f75733330f3f4cff8a5311</anchor>
      <arglist>(ngram_model_t *set, ngram_model_t *model, const char *name, float32 weight, int reuse_widmap)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT ngram_model_t *</type>
      <name>ngram_model_set_remove</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>af761011a07b87c209e6d174e07b34617</anchor>
      <arglist>(ngram_model_t *set, const char *name, int reuse_widmap)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ngram_model_set_map_words</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a3e8abe87ae12cfbe1b79fd99213abe2d</anchor>
      <arglist>(ngram_model_t *set, const char **words, int32 n_words)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_set_current_wid</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>af783553aa7527b7544d093aaea74d97a</anchor>
      <arglist>(ngram_model_t *set, int32 set_wid)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>ngram_model_set_known_wid</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>ad87975912cfe1ac5d0c3ebe12de79209</anchor>
      <arglist>(ngram_model_t *set, int32 set_wid)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ngram_model_flush</name>
      <anchorfile>ngram__model_8h.html</anchorfile>
      <anchor>a8304f56d82278824b0a94c254d7235aa</anchor>
      <arglist>(ngram_model_t *lm)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pio.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>pio_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <class kind="struct">lineiter_t</class>
    <member kind="define">
      <type>#define</type>
      <name>myfopen</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a96b37e449c7f8698fcfafac1c46cebb2</anchor>
      <arglist>(file, mode)</arglist>
    </member>
    <member kind="typedef">
      <type>struct lineiter_t</type>
      <name>lineiter_t</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a3437935bf372acd79fa68b8f9754fa69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct bit_encode_s</type>
      <name>bit_encode_t</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>ae72c3bec19638da72dad3849f75c0cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT FILE *</type>
      <name>fopen_comp</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>aa3d71506049eb49cf03eff1b89ef281f</anchor>
      <arglist>(const char *file, const char *mode, int32 *ispipe)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>fclose_comp</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a87592c3a2d0a00eed9eda014950beb65</anchor>
      <arglist>(FILE *fp, int32 ispipe)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT FILE *</type>
      <name>fopen_compchk</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>addfd26392f118f811584721b8d4854ce</anchor>
      <arglist>(const char *file, int32 *ispipe)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT FILE *</type>
      <name>_myfopen</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>aa22301f25d56be607c9ff45f2c935b14</anchor>
      <arglist>(const char *file, const char *mode, const char *pgm, int32 line)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>fread_retry</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a601277430d3221bf1906bb879ae26d3e</anchor>
      <arglist>(void *pointer, int32 size, int32 num_items, FILE *stream)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char *</type>
      <name>fread_line</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a11e0daa4f315d01c2e030d3a0abe702c</anchor>
      <arglist>(FILE *stream, size_t *out_len)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT lineiter_t *</type>
      <name>lineiter_start</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a22d0125ab198f02f8bbe543417d99566</anchor>
      <arglist>(FILE *fh)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT lineiter_t *</type>
      <name>lineiter_start_clean</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a45ce4c15a564179e9148445fe44ac482</anchor>
      <arglist>(FILE *fh)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT lineiter_t *</type>
      <name>lineiter_next</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>aff8df0b6928746d61b3520555263f71e</anchor>
      <arglist>(lineiter_t *li)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>lineiter_free</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a3f80e5d4d666426cef229dd41237d9cf</anchor>
      <arglist>(lineiter_t *li)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>lineiter_lineno</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a7d612f02b2077ffb11cc37c3522b10d7</anchor>
      <arglist>(lineiter_t *li)</arglist>
    </member>
    <member kind="function">
      <type>bit_encode_t *</type>
      <name>bit_encode_attach</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a82e4694a4c13c96550f2410f8c63b1f5</anchor>
      <arglist>(FILE *outfh)</arglist>
    </member>
    <member kind="function">
      <type>bit_encode_t *</type>
      <name>bit_encode_retain</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>ada6d9bb75e08493cde00d396dae088f1</anchor>
      <arglist>(bit_encode_t *be)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bit_encode_free</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a8330637520174419771670ed740c9049</anchor>
      <arglist>(bit_encode_t *be)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bit_encode_write</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a59d83bd5850d9ec58175c566d6d48f71</anchor>
      <arglist>(bit_encode_t *be, unsigned char const *bits, int nbits)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bit_encode_write_cw</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>ae71dedb663c8e3ae8b91dbfbc95ac420</anchor>
      <arglist>(bit_encode_t *be, uint32 codeword, int nbits)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bit_encode_flush</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a3e818645e567961225977a1923debc3d</anchor>
      <arglist>(bit_encode_t *be)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>stat_retry</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a0ba35509687e80ee65ba731c7cfcad9b</anchor>
      <arglist>(const char *file, struct stat *statbuf)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>stat_mtime</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a289e3a1582ab60563ae0689979992669</anchor>
      <arglist>(const char *file)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>build_directory</name>
      <anchorfile>pio_8h.html</anchorfile>
      <anchor>a6df697b8a08cd4d11fe7b864dcb99012</anchor>
      <arglist>(const char *path)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>prim_type.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>prim__type_8h</filename>
    <class kind="union">anytype_s</class>
    <member kind="define">
      <type>#define</type>
      <name>__BIGSTACKVARIABLE__</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a64d603953ff96570ac4072daaeaeb36b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TRUE</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>aa8cecfc5c5c054d2875c03e77b7be15d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FALSE</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>aa93f0eb578d23995850d61f7d61c55c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NULL</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a070d2ce7b6bb7e5c05602aa8c308d0c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_INT32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>aac62d87844689a18b6f5339a89ed6e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_INT16</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a3905e54374e49708219791e7d59c60fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_INT8</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>aa092b7d509790c28edc065b23de6e39e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_NEG_INT32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a29962133c3b9c5c2cf72f7d9299fd4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_NEG_INT16</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a4338527c828e68762d8b40e01f0e0869</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_NEG_INT8</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a76a3e608c93aff0ad98b3b742c51d38f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_UINT32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a26248174abf27973b9edfa9b70ba4c93</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_UINT16</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>abc023544d8096a8fa1bd1f6f6f90bc41</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_UINT8</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a05682ca8de174141447ff05a2289a27c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_POS_FLOAT32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a763737bb762908f1014777705e1bd5e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_POS_FLOAT32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a6ebe6d883694f66620b6d2dd94dc38e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_POS_FLOAT64</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a63f40e6ca19e802259413c04cc56bd28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_POS_FLOAT64</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a2fc3595771a7d0f944470fd9ba07cfad</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_IEEE_NORM_POS_FLOAT32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>ab806e0c70417e38f2302635bbb78c8c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_IEEE_NORM_POS_FLOAT32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a8b4a04ec8b6561c6f831dfd2434fd505</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_IEEE_NORM_NEG_FLOAT32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a7dcce0312b93eb66d4e662fd035560bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_IEEE_NORM_POS_FLOAT64</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a424bb3e6f9a39ec4d9f0ed965ab92026</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_IEEE_NORM_POS_FLOAT64</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>aa8adb129a54c32e19ba7cc9171779687</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_IEEE_NORM_NEG_FLOAT64</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>ad8550cd6490d48fd6f4949626084fbdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_NEG_FLOAT32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a28dec1bda2ada96d7126ef83feae2845</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_NEG_FLOAT32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a98d8dffc8bc9036591980531b57e7f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAX_NEG_FLOAT64</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>acb6f44b9148976581d01ab2e1313c635</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MIN_NEG_FLOAT64</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a2e65d00cc854972aae6f58d9cb7d383f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>union anytype_s</type>
      <name>anytype_t</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a98bfefef272895ed1506502cdb8c1aa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>int32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a56f1a81c92849566ae864511088eb7e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short</type>
      <name>int16</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a4355d16fcf9f644c9ac84293f0b1801f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signed char</type>
      <name>int8</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a1b956fe1df85f3c132b21edb4e116458</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a1134b580f8da4de94ca6b1de4d37975e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short</type>
      <name>uint16</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a05f6b0ae8f6a6e135b0e290c25fe0e4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>uint8</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>adde6aaee8457bee49c2a92621fe22b79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>float32</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>aacdc525d6f7bddb3ae95d5c311bd06a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>float64</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a232fad1b0d6dcc7c16aabde98b2e2a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>int64</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a5ca2adc31be9c44adfeb373feb166821</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>uint64</name>
      <anchorfile>prim__type_8h.html</anchorfile>
      <anchor>a521337cd39452f9e318a6a3c3f6694ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>profile.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>profile_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <class kind="struct">pctr_t</class>
    <class kind="struct">ptmr_t</class>
    <member kind="function">
      <type>SPHINXBASE_EXPORT pctr_t *</type>
      <name>pctr_new</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>acc5bd9ca1cc61377433a308b082d34b8</anchor>
      <arglist>(char *name)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>pctr_reset</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>a7d072965099f09c49a58e3fd422c48f4</anchor>
      <arglist>(pctr_t *ctr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>pctr_print</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>a4333e06af6db1fd806846c9f9b1f3f78</anchor>
      <arglist>(FILE *fp, pctr_t *ctr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>pctr_increment</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>a29e1c5d5f5b462d24a84204e532943fa</anchor>
      <arglist>(pctr_t *ctr, int32 inc)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>pctr_free</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>a90821b8f5c4593ead9f8ebea8ca6994c</anchor>
      <arglist>(pctr_t *ctr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ptmr_start</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>aada447eb3dc8c9ffb17fd7331ae671e7</anchor>
      <arglist>(ptmr_t *tmr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ptmr_stop</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>ade42334cf2db0bc8858ff966e55a4ffb</anchor>
      <arglist>(ptmr_t *tmr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ptmr_reset</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>a32b1bf9f877946fb455c493a6aa3613f</anchor>
      <arglist>(ptmr_t *tmr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ptmr_init</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>a5260d9143ed28fa82c2ab410abce6749</anchor>
      <arglist>(ptmr_t *tmr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ptmr_reset_all</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>a0aaa0953b76ae8c9947d6d982bbbd4a7</anchor>
      <arglist>(ptmr_t *tmr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>ptmr_print_all</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>a08a625009ff1a5e2ee8aa02b53009f66</anchor>
      <arglist>(FILE *fp, ptmr_t *tmr, float64 norm)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>host_pclk</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>a4315a0c6da4e9d3ef3c0ce264620ce28</anchor>
      <arglist>(int32 dummy)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>host_endian</name>
      <anchorfile>profile_8h.html</anchorfile>
      <anchor>aa23a14aa8ae716d64e632d61b1c2ed77</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sbthread.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>sbthread_8h</filename>
    <includes id="cmd__ln_8h" name="cmd_ln.h" local="no" imported="no">sphinxbase/cmd_ln.h</includes>
    <member kind="typedef">
      <type>struct sbthread_s</type>
      <name>sbthread_t</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a068f6028c760eee1e4eb4655ac7e7424</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sbmsgq_s</type>
      <name>sbmsgq_t</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>aad7adcc2e5f2fd6d2f429c25a52356ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sbmtx_s</type>
      <name>sbmtx_t</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a21bc1100c4336693a6f25cdeec40cbec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct sbevent_s</type>
      <name>sbevent_t</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a312dae368aa1662b07f199ea802cdefa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int(*</type>
      <name>sbthread_main</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>acb30b2ddcf70058f8bd38d68920be777</anchor>
      <arglist>)(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT sbthread_t *</type>
      <name>sbthread_start</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>abfe1f703f4e17a2940c88d86d1987a8f</anchor>
      <arglist>(cmd_ln_t *config, sbthread_main func, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbthread_wait</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a09c5c428b02b743c99d20bb2b11d964b</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>sbthread_free</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>aa7827b760dfa47d95141f4896698e5c5</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT cmd_ln_t *</type>
      <name>sbthread_config</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>ab03c2f299f3e94b9f53aac1c1eaa0695</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>sbthread_arg</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a130f2273128498e0f1d875cf6c0c2928</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT sbmsgq_t *</type>
      <name>sbthread_msgq</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a5dfe1b7bb9c8d9aea7339e99a89307af</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbthread_send</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a932830409403ab4a03f0ffefe907551e</anchor>
      <arglist>(sbthread_t *th, size_t len, void const *data)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT sbmsgq_t *</type>
      <name>sbmsgq_init</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a535a4d0d3f71c30f32d75b6268cc5e1e</anchor>
      <arglist>(size_t depth)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>sbmsgq_free</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>ab1ab59934422a5fac90ce0c4b66ffcc8</anchor>
      <arglist>(sbmsgq_t *q)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbmsgq_send</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>ab0591b5cb626be52dd22edf8fa13a3e3</anchor>
      <arglist>(sbmsgq_t *q, size_t len, void const *data)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void *</type>
      <name>sbmsgq_wait</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>ab3a421d172a92ef5ad371442a66767b5</anchor>
      <arglist>(sbmsgq_t *q, size_t *out_len, int sec, int nsec)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT sbmtx_t *</type>
      <name>sbmtx_init</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a28067c5be5370074d21668620a68b229</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbmtx_trylock</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a3b86c81160360234944737b4eab73125</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbmtx_lock</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a6615e839f7c8ef3ebb6b288525f002cd</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbmtx_unlock</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>af65691258c916c68f1b5d000aaea233f</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>sbmtx_free</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>aa17a6a93744eb813ca80bf098c69bdba</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT sbevent_t *</type>
      <name>sbevent_init</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a1b3fa1cf6b82dcd82ab8d4124ab12490</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>sbevent_free</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>afe8253a0e804a019ad0d8c540eec75af</anchor>
      <arglist>(sbevent_t *evt)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbevent_signal</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>a7c01e3e70c2ab8e961d59db84aa5fa68</anchor>
      <arglist>(sbevent_t *evt)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>sbevent_wait</name>
      <anchorfile>sbthread_8h.html</anchorfile>
      <anchor>ac211760e4dffccf0102db65fb6f2c5b3</anchor>
      <arglist>(sbevent_t *evt, int sec, int nsec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>strfuncs.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>strfuncs_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <member kind="enumeration">
      <name>string_edge_e</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>ab5c9ca15770a4bd3047705762b815df9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRING_START</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>ab5c9ca15770a4bd3047705762b815df9a5e4d73e6ca445be10fa48351b9571125</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRING_END</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>ab5c9ca15770a4bd3047705762b815df9a11f31598e50bf3cf1d0aa97d967bb9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRING_BOTH</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>ab5c9ca15770a4bd3047705762b815df9a4fcbb0fe16fa4aa48723ba3ba10c26dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char *</type>
      <name>string_join</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>a317522f23d291311e366de34ef86b777</anchor>
      <arglist>(const char *base,...)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT char *</type>
      <name>string_trim</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>ac36a095632a4f16cf4e0fbcdb01de5ad</anchor>
      <arglist>(char *string, enum string_edge_e which)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT double</type>
      <name>atof_c</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>ab708351fe7308551632a782bfad75a1e</anchor>
      <arglist>(char const *str)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT uint32</type>
      <name>utf8_decode</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>aab1bdad6b50285de4b7cd042f67314dd</anchor>
      <arglist>(uint32 *state, uint32 *codep, uint32 *byte)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>str2words</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>a5b520fdebcca599db86faaf75a82173f</anchor>
      <arglist>(char *line, char **wptr, int32 n_wptr)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int32</type>
      <name>nextword</name>
      <anchorfile>strfuncs_8h.html</anchorfile>
      <anchor>a41d9a59e4326b545bf1282401319f553</anchor>
      <arglist>(char *line, const char *delim, char **word, char *delimfound)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>unlimit.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>unlimit_8h</filename>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>unlimit</name>
      <anchorfile>unlimit_8h.html</anchorfile>
      <anchor>a0b8bf51305f48eb78ff53ebb8ad27248</anchor>
      <arglist>(void)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>yin.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/include/sphinxbase/</path>
    <filename>yin_8h</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <member kind="typedef">
      <type>struct yin_s</type>
      <name>yin_t</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>a69a22f00f601c099b232e01b94704c2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT yin_t *</type>
      <name>yin_init</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>afc3a955f8d2215ed3d660737643c4f32</anchor>
      <arglist>(int frame_size, float search_threshold, float search_range, int smooth_window)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>yin_free</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>ae587e0d984966c482f21ee4cb0952dd0</anchor>
      <arglist>(yin_t *pe)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>yin_start</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>a9a93d7c0fd3eb97d8ea735a76683ff4d</anchor>
      <arglist>(yin_t *pe)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>yin_end</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>a9182cabf44e517c2db3b67edacebece9</anchor>
      <arglist>(yin_t *pe)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT void</type>
      <name>yin_write</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>ac316a9b80593ad996df71b0f6df54d6c</anchor>
      <arglist>(yin_t *pe, int16 const *frame)</arglist>
    </member>
    <member kind="function">
      <type>SPHINXBASE_EXPORT int</type>
      <name>yin_read</name>
      <anchorfile>yin_8h.html</anchorfile>
      <anchor>a3a0ae5d5a543b9e71b34c9b4a285bdbf</anchor>
      <arglist>(yin_t *pe, uint16 *out_period, uint16 *out_bestdiff)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>yin.c</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/src/libsphinxbase/fe/</path>
    <filename>yin_8c</filename>
    <includes id="prim__type_8h" name="prim_type.h" local="yes" imported="no">sphinxbase/prim_type.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="yes" imported="no">sphinxbase/ckd_alloc.h</includes>
    <includes id="yin_8h" name="yin.h" local="yes" imported="no">sphinxbase/yin.h</includes>
    <class kind="struct">yin_s</class>
    <member kind="function">
      <type>yin_t *</type>
      <name>yin_init</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>adeaf7df902787daf9fa9d7453798c01e</anchor>
      <arglist>(int frame_size, float search_threshold, float search_range, int smooth_window)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yin_free</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>a98f2ed13316b8ab9bf93feb4b6d3e7bd</anchor>
      <arglist>(yin_t *pe)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yin_start</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>aedb765d2c9f8f9d96f90b4971ed0f649</anchor>
      <arglist>(yin_t *pe)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yin_end</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>abfe51d8b596f85941831b2727e49c181</anchor>
      <arglist>(yin_t *pe)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>thresholded_search</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>a3befedc0027bb60c5c4b571a6a5c2e03</anchor>
      <arglist>(int32 *diff_window, fixed32 threshold, int start, int end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>yin_write</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>ae272b1d9ce8ad45f69eb8b5f98f305b6</anchor>
      <arglist>(yin_t *pe, int16 const *frame)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>yin_read</name>
      <anchorfile>yin_8c.html</anchorfile>
      <anchor>a5d4ceba1aed1fcc8e10f6408a271b294</anchor>
      <arglist>(yin_t *pe, uint16 *out_period, uint16 *out_bestdiff)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jsgf.c</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/src/libsphinxbase/lm/</path>
    <filename>jsgf_8c</filename>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="yes" imported="no">sphinxbase/ckd_alloc.h</includes>
    <includes id="strfuncs_8h" name="strfuncs.h" local="yes" imported="no">sphinxbase/strfuncs.h</includes>
    <includes id="hash__table_8h" name="hash_table.h" local="yes" imported="no">sphinxbase/hash_table.h</includes>
    <includes id="err_8h" name="err.h" local="yes" imported="no">sphinxbase/err.h</includes>
    <includes id="jsgf__internal_8h" name="jsgf_internal.h" local="yes" imported="no">jsgf_internal.h</includes>
    <member kind="function">
      <type>jsgf_atom_t *</type>
      <name>jsgf_atom_new</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a0e59b63784fa8761358bb2bdf568bec1</anchor>
      <arglist>(char *name, float weight)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>jsgf_atom_free</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a289d683bf62d1a5aaac6917fa64f54f2</anchor>
      <arglist>(jsgf_atom_t *atom)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_t *</type>
      <name>jsgf_grammar_new</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a2f4a4ef97090210de6c73361de1d9561</anchor>
      <arglist>(jsgf_t *parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jsgf_grammar_free</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a0a5185af0b0f1c19d85ae553c5ecc51b</anchor>
      <arglist>(jsgf_t *jsgf)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_atom_t *</type>
      <name>jsgf_kleene_new</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>ab9dc2ab39224cda76c43822150cf7e67</anchor>
      <arglist>(jsgf_t *jsgf, jsgf_atom_t *atom, int plus)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_t *</type>
      <name>jsgf_optional_new</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a4a07cb0721add8783f0ea24dfacd6c0f</anchor>
      <arglist>(jsgf_t *jsgf, jsgf_rhs_t *exp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jsgf_add_link</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>acb5af4a04abc56a8584eba9b937f8154</anchor>
      <arglist>(jsgf_t *grammar, jsgf_atom_t *atom, int from, int to)</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>jsgf_grammar_name</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a5c84e0a3cebe022d4f7ab8b204c8da43</anchor>
      <arglist>(jsgf_t *jsgf)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_iter_t *</type>
      <name>jsgf_rule_iter</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>afd426d7e3799f54b4d5c0acff7684233</anchor>
      <arglist>(jsgf_t *grammar)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_t *</type>
      <name>jsgf_get_rule</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a18fc91b6b6e79fb183147502df372b5e</anchor>
      <arglist>(jsgf_t *grammar, char const *name)</arglist>
    </member>
    <member kind="function">
      <type>char const *</type>
      <name>jsgf_rule_name</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a94a20b28b8bb3a179e567caec972d002</anchor>
      <arglist>(jsgf_rule_t *rule)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>jsgf_rule_public</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a49d5d9f6c1edda3bb087545ecfa21809</anchor>
      <arglist>(jsgf_rule_t *rule)</arglist>
    </member>
    <member kind="function">
      <type>fsg_model_t *</type>
      <name>jsgf_build_fsg</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a2a3f3ade56bed13c58059a6ede5fd1dc</anchor>
      <arglist>(jsgf_t *grammar, jsgf_rule_t *rule, logmath_t *lmath, float32 lw)</arglist>
    </member>
    <member kind="function">
      <type>fsg_model_t *</type>
      <name>jsgf_build_fsg_raw</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a68e2c50712a3d1da5d9d6cb25a7198ee</anchor>
      <arglist>(jsgf_t *grammar, jsgf_rule_t *rule, logmath_t *lmath, float32 lw)</arglist>
    </member>
    <member kind="function">
      <type>fsg_model_t *</type>
      <name>jsgf_read_file</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>adfb0b4d697fcd8760d051c38689c85e2</anchor>
      <arglist>(const char *file, logmath_t *lmath, float32 lw)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>jsgf_write_fsg</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>ab9454daf3cdf0c857b0f4780b600632c</anchor>
      <arglist>(jsgf_t *grammar, jsgf_rule_t *rule, FILE *outfh)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_t *</type>
      <name>jsgf_define_rule</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a91539f6bf30f85af4b90b5a85598f53f</anchor>
      <arglist>(jsgf_t *jsgf, char *name, jsgf_rhs_t *rhs, int public)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_t *</type>
      <name>jsgf_rule_retain</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>ad152a23eb0f0d9af8417919fc93074fd</anchor>
      <arglist>(jsgf_rule_t *rule)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>jsgf_rule_free</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>af2faf6fb74ad1e4d43cf990c1bcec672</anchor>
      <arglist>(jsgf_rule_t *rule)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_t *</type>
      <name>jsgf_import_rule</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>afe1e47584e4dd80929552ffed77373f2</anchor>
      <arglist>(jsgf_t *jsgf, char *name)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_t *</type>
      <name>jsgf_parse_file</name>
      <anchorfile>jsgf_8c.html</anchorfile>
      <anchor>a322da18b1c115f1b3a1b7c766cf9e778</anchor>
      <arglist>(const char *filename, jsgf_t *parent)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>jsgf_internal.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/src/libsphinxbase/lm/</path>
    <filename>jsgf__internal_8h</filename>
    <includes id="hash__table_8h" name="hash_table.h" local="no" imported="no">sphinxbase/hash_table.h</includes>
    <includes id="glist_8h" name="glist.h" local="no" imported="no">sphinxbase/glist.h</includes>
    <includes id="logmath_8h" name="logmath.h" local="no" imported="no">sphinxbase/logmath.h</includes>
    <includes id="strfuncs_8h" name="strfuncs.h" local="no" imported="no">sphinxbase/strfuncs.h</includes>
    <includes id="jsgf_8h" name="jsgf.h" local="no" imported="no">sphinxbase/jsgf.h</includes>
    <class kind="struct">jsgf_s</class>
    <class kind="struct">jsgf_rule_s</class>
    <class kind="struct">jsgf_rhs_s</class>
    <class kind="struct">jsgf_atom_s</class>
    <class kind="struct">jsgf_link_s</class>
    <member kind="define">
      <type>#define</type>
      <name>YY_NO_UNISTD_H</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>ae78ac56cd1f29572e967ed7636952d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>YY_NO_INPUT</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>a85523a0c7d95c059d251b4e9829947aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>jsgf_atom_is_rule</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>ac4452bbb59863e64d73f4fe2d6cd394f</anchor>
      <arglist>(atom)</arglist>
    </member>
    <member kind="typedef">
      <type>struct jsgf_rhs_s</type>
      <name>jsgf_rhs_t</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>ad8fc00ae94c7a558005de3e89c35142f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct jsgf_atom_s</type>
      <name>jsgf_atom_t</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>a439a04913bdb6a58d86ad152b952f0ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>struct jsgf_link_s</type>
      <name>jsgf_link_t</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>a5b84ef71c936d856751f19992a7245eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jsgf_add_link</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>acb5af4a04abc56a8584eba9b937f8154</anchor>
      <arglist>(jsgf_t *grammar, jsgf_atom_t *atom, int from, int to)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_atom_t *</type>
      <name>jsgf_atom_new</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>a0e59b63784fa8761358bb2bdf568bec1</anchor>
      <arglist>(char *name, float weight)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_atom_t *</type>
      <name>jsgf_kleene_new</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>ab9dc2ab39224cda76c43822150cf7e67</anchor>
      <arglist>(jsgf_t *jsgf, jsgf_atom_t *atom, int plus)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_t *</type>
      <name>jsgf_optional_new</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>a4a07cb0721add8783f0ea24dfacd6c0f</anchor>
      <arglist>(jsgf_t *jsgf, jsgf_rhs_t *exp)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_t *</type>
      <name>jsgf_define_rule</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>a91539f6bf30f85af4b90b5a85598f53f</anchor>
      <arglist>(jsgf_t *jsgf, char *name, jsgf_rhs_t *rhs, int public)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_t *</type>
      <name>jsgf_import_rule</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>afe1e47584e4dd80929552ffed77373f2</anchor>
      <arglist>(jsgf_t *jsgf, char *name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>jsgf_atom_free</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>a289d683bf62d1a5aaac6917fa64f54f2</anchor>
      <arglist>(jsgf_atom_t *atom)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>jsgf_rule_free</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>af2faf6fb74ad1e4d43cf990c1bcec672</anchor>
      <arglist>(jsgf_rule_t *rule)</arglist>
    </member>
    <member kind="function">
      <type>jsgf_rule_t *</type>
      <name>jsgf_rule_retain</name>
      <anchorfile>jsgf__internal_8h.html</anchorfile>
      <anchor>ad152a23eb0f0d9af8417919fc93074fd</anchor>
      <arglist>(jsgf_rule_t *rule)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ngram_model_set.c</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/src/libsphinxbase/lm/</path>
    <filename>ngram__model__set_8c</filename>
    <includes id="err_8h" name="err.h" local="yes" imported="no">sphinxbase/err.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="yes" imported="no">sphinxbase/ckd_alloc.h</includes>
    <includes id="strfuncs_8h" name="strfuncs.h" local="yes" imported="no">sphinxbase/strfuncs.h</includes>
    <includes id="filename_8h" name="filename.h" local="yes" imported="no">sphinxbase/filename.h</includes>
    <includes id="ngram__model__set_8h" name="ngram_model_set.h" local="yes" imported="no">ngram_model_set.h</includes>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_init</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>aa4cc619035ac8091759c07d6a3b2fb7c</anchor>
      <arglist>(cmd_ln_t *config, ngram_model_t **models, char **names, const float32 *weights, int32 n_models)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_read</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a1389a90bf32110fd7e56a73b6d39fa07</anchor>
      <arglist>(cmd_ln_t *config, const char *lmctlfile, logmath_t *lmath)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>ngram_model_set_count</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>afa38d4e0f6cd64cc2875000fcef487f0</anchor>
      <arglist>(ngram_model_t *base)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_set_iter_t *</type>
      <name>ngram_model_set_iter</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a5a1593344017a1210569beb63e4089d3</anchor>
      <arglist>(ngram_model_t *base)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_set_iter_t *</type>
      <name>ngram_model_set_iter_next</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a13893e41e56962f6f237aa1305337b7a</anchor>
      <arglist>(ngram_model_set_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ngram_model_set_iter_free</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a532787b5b709d0c5f0ad57e3df0d1d73</anchor>
      <arglist>(ngram_model_set_iter_t *itor)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_iter_model</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>abec0455e59945b910d86c2f825ab0894</anchor>
      <arglist>(ngram_model_set_iter_t *itor, char const **lmname)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_lookup</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a3e06e5d47a9c35186644cc1310924630</anchor>
      <arglist>(ngram_model_t *base, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_select</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a2cbeda856dd655c80f8dc6ba91f5d20b</anchor>
      <arglist>(ngram_model_t *base, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>ngram_model_set_current</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a3a4f2bb40d10e9420e6291e2706b6865</anchor>
      <arglist>(ngram_model_t *base)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>ngram_model_set_current_wid</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>aa6239b58f333177839a15de79bae6146</anchor>
      <arglist>(ngram_model_t *base, int32 set_wid)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>ngram_model_set_known_wid</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>af30197146b9b2d6c143914240dee3c04</anchor>
      <arglist>(ngram_model_t *base, int32 set_wid)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_interp</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a3a926714c60e2b8308d4c88d11d17d7e</anchor>
      <arglist>(ngram_model_t *base, const char **names, const float32 *weights)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_add</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a53071575bca9465361740c809666349d</anchor>
      <arglist>(ngram_model_t *base, ngram_model_t *model, const char *name, float32 weight, int reuse_widmap)</arglist>
    </member>
    <member kind="function">
      <type>ngram_model_t *</type>
      <name>ngram_model_set_remove</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>a1fadaf8cdc6799869b74a39a8652a7e0</anchor>
      <arglist>(ngram_model_t *base, const char *name, int reuse_widmap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ngram_model_set_map_words</name>
      <anchorfile>ngram__model__set_8c.html</anchorfile>
      <anchor>af3ac3bbec3eed0b9638c4e64c8b75949</anchor>
      <arglist>(ngram_model_t *base, const char **words, int32 n_words)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ngram_model_set.h</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/src/libsphinxbase/lm/</path>
    <filename>ngram__model__set_8h</filename>
    <class kind="struct">ngram_model_set_s</class>
    <class kind="struct">ngram_model_set_iter_s</class>
    <member kind="typedef">
      <type>struct ngram_model_set_s</type>
      <name>ngram_model_set_t</name>
      <anchorfile>ngram__model__set_8h.html</anchorfile>
      <anchor>af89b4060ed18e3f4e3ac0490a09d5745</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>err.c</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/src/libsphinxbase/util/</path>
    <filename>err_8c</filename>
    <includes id="err_8h" name="err.h" local="yes" imported="no">sphinxbase/err.h</includes>
    <member kind="function">
      <type>int</type>
      <name>err_set_debug_level</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>ac7956e03cd685da5fe6e134c462f73e1</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>err_get_debug_level</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>a393ad2383651d1fed0223c92208a6631</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>FILE *</type>
      <name>err_get_logfp</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>ae32e95118a1273e1e99584f2c555231a</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>FILE *</type>
      <name>err_set_logfp</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>a60adc1968822a513d4111963b3eddd79</anchor>
      <arglist>(FILE *newfp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>err_set_logfile</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>aaa2d9e5fcb8d7b80d941ba6374762ebe</anchor>
      <arglist>(char const *file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_E__pr_info_header_wofn</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>afd2e78db5fc2b29d87b434d0a2d0d07e</anchor>
      <arglist>(char const *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_E__pr_header</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>a5ff468fc371d3fd651257df3819e412a</anchor>
      <arglist>(char const *f, long ln, char const *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_E__pr_info_header</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>af0a195f2b0f1f9fc2ef7d60593b66faa</anchor>
      <arglist>(char const *f, long ln, char const *msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_E__pr_warn</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>a8cdfd1775cf364e5705bb00a262c7865</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_E__pr_info</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>ad90268a25147c7485c0b41b1b12783e4</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_E__die_error</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>ad6271835d1ac95bf7d04cf30a148fb79</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_E__fatal_sys_error</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>add44119b26798320a43e2eaee0f71a15</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_E__sys_error</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>a9b5c6b51090d5a2aaedf1ab8e43e8f5c</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>_E__abort_error</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>a28cf0aaaf44493d5a78dec076d227df4</anchor>
      <arglist>(char const *fmt,...)</arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>logfp</name>
      <anchorfile>err_8c.html</anchorfile>
      <anchor>ac16dab5cefce6fed135c20d1bae372a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sbthread.c</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/src/libsphinxbase/util/</path>
    <filename>sbthread_8c</filename>
    <includes id="sbthread_8h" name="sbthread.h" local="yes" imported="no">sphinxbase/sbthread.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="yes" imported="no">sphinxbase/ckd_alloc.h</includes>
    <includes id="err_8h" name="err.h" local="yes" imported="no">sphinxbase/err.h</includes>
    <class kind="struct">sbthread_s</class>
    <class kind="struct">sbmsgq_s</class>
    <class kind="struct">sbevent_s</class>
    <class kind="struct">sbmtx_s</class>
    <member kind="function">
      <type>sbthread_t *</type>
      <name>sbthread_start</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>a0ba06f52feda5c218dc38373e930017c</anchor>
      <arglist>(cmd_ln_t *config, sbthread_main func, void *arg)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbthread_wait</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>ad4cc725834be72ea986f80c4f4ecb24d</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>sbmsgq_t *</type>
      <name>sbmsgq_init</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>a76852d201655b6f08ed6c35f6ebf8b4b</anchor>
      <arglist>(size_t depth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sbmsgq_free</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>aa8483d06a1456207643abcfebc3b2e0a</anchor>
      <arglist>(sbmsgq_t *msgq)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbmsgq_send</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>ae6c214bf1fab2f10cb51648b7e736698</anchor>
      <arglist>(sbmsgq_t *q, size_t len, void const *data)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>sbmsgq_wait</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>a5ef0a82190db1efc97e5921d2f822535</anchor>
      <arglist>(sbmsgq_t *q, size_t *out_len, int sec, int nsec)</arglist>
    </member>
    <member kind="function">
      <type>sbevent_t *</type>
      <name>sbevent_init</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>ad6f018be06301acbfd2b41888ca1d345</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sbevent_free</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>abba6d18d863334a98eecbaf5ffe81ab1</anchor>
      <arglist>(sbevent_t *evt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbevent_signal</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>a89f88d25e27146dc7e4956211e69a6d5</anchor>
      <arglist>(sbevent_t *evt)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbevent_wait</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>a9f48001ca75395a3b192902b37edd5e0</anchor>
      <arglist>(sbevent_t *evt, int sec, int nsec)</arglist>
    </member>
    <member kind="function">
      <type>sbmtx_t *</type>
      <name>sbmtx_init</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>a690fb21b06b7ef9f958a4a204bc04269</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbmtx_trylock</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>aaca10c92363d8979100c8fddeb783f9a</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbmtx_lock</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>a000d9d0610c6b91649edde95e3bafa6c</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbmtx_unlock</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>ab3fdc55976e2b0581e598bd20187ce3a</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sbmtx_free</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>af1f9eb876ca9fc93d6c548120af14197</anchor>
      <arglist>(sbmtx_t *mtx)</arglist>
    </member>
    <member kind="function">
      <type>cmd_ln_t *</type>
      <name>sbthread_config</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>a95c25385f31541c412a458deb9ee94e5</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>sbthread_arg</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>a94e4cf2b756764e453b1469df79b3140</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>sbmsgq_t *</type>
      <name>sbthread_msgq</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>af13e76cf03ad458f48f9604ec4731bdc</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sbthread_send</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>afae533b302b310a828cf2eed1f2f5995</anchor>
      <arglist>(sbthread_t *th, size_t len, void const *data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sbthread_free</name>
      <anchorfile>sbthread_8c.html</anchorfile>
      <anchor>a2b80d955dab72ff602d9048551dc7489</anchor>
      <arglist>(sbthread_t *th)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>main_cepview.c</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/src/sphinx_cepview/</path>
    <filename>main__cepview_8c</filename>
    <includes id="strfuncs_8h" name="strfuncs.h" local="no" imported="no">sphinxbase/strfuncs.h</includes>
    <includes id="prim__type_8h" name="prim_type.h" local="no" imported="no">sphinxbase/prim_type.h</includes>
    <includes id="cmd__ln_8h" name="cmd_ln.h" local="no" imported="no">sphinxbase/cmd_ln.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="no" imported="no">sphinxbase/ckd_alloc.h</includes>
    <includes id="info_8h" name="info.h" local="no" imported="no">sphinxbase/info.h</includes>
    <includes id="err_8h" name="err.h" local="no" imported="no">sphinxbase/err.h</includes>
    <includes id="bio_8h" name="bio.h" local="no" imported="no">sphinxbase/bio.h</includes>
    <includes id="pio_8h" name="pio.h" local="no" imported="no">sphinxbase/pio.h</includes>
    <member kind="define">
      <type>#define</type>
      <name>IO_ERR</name>
      <anchorfile>main__cepview_8c.html</anchorfile>
      <anchor>a2f594e19531c324dd254ba0cc712044d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>IO_SUCCESS</name>
      <anchorfile>main__cepview_8c.html</anchorfile>
      <anchor>adad481c8f8fcb43725ccb11be5c690f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SHOW_ALL</name>
      <anchorfile>main__cepview_8c.html</anchorfile>
      <anchor>aaddcd19f0e123722b857ec68d1d3e156</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NUM_COEFF</name>
      <anchorfile>main__cepview_8c.html</anchorfile>
      <anchor>a56e7544225bcd9da32fa61cde6e6f523</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DISPLAY_SIZE</name>
      <anchorfile>main__cepview_8c.html</anchorfile>
      <anchor>a035c0b93babde37c8919064af8b67928</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>STR_MAX_INT</name>
      <anchorfile>main__cepview_8c.html</anchorfile>
      <anchor>a01f1f09f8562ef6971aa38c4f8f32954</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read_cep</name>
      <anchorfile>main__cepview_8c.html</anchorfile>
      <anchor>ad215db6a8261bb1c920d087564a1dd87</anchor>
      <arglist>(char const *file, float ***cep, int *nframes, int numcep)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>main__cepview_8c.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sphinx_lm_convert.c</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/src/sphinx_lmtools/</path>
    <filename>sphinx__lm__convert_8c</filename>
    <includes id="logmath_8h" name="logmath.h" local="no" imported="no">sphinxbase/logmath.h</includes>
    <includes id="ngram__model_8h" name="ngram_model.h" local="no" imported="no">sphinxbase/ngram_model.h</includes>
    <includes id="cmd__ln_8h" name="cmd_ln.h" local="no" imported="no">sphinxbase/cmd_ln.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="no" imported="no">sphinxbase/ckd_alloc.h</includes>
    <includes id="err_8h" name="err.h" local="no" imported="no">sphinxbase/err.h</includes>
    <includes id="pio_8h" name="pio.h" local="no" imported="no">sphinxbase/pio.h</includes>
    <includes id="strfuncs_8h" name="strfuncs.h" local="no" imported="no">sphinxbase/strfuncs.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>sphinx__lm__convert_8c.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sphinx_lm_eval.c</name>
    <path>/home/christophe/ROS/catkin_ws/src/demo-riddle/src/cmu-sphinx/sphinxbase/src/sphinx_lmtools/</path>
    <filename>sphinx__lm__eval_8c</filename>
    <includes id="logmath_8h" name="logmath.h" local="no" imported="no">sphinxbase/logmath.h</includes>
    <includes id="ngram__model_8h" name="ngram_model.h" local="no" imported="no">sphinxbase/ngram_model.h</includes>
    <includes id="cmd__ln_8h" name="cmd_ln.h" local="no" imported="no">sphinxbase/cmd_ln.h</includes>
    <includes id="ckd__alloc_8h" name="ckd_alloc.h" local="no" imported="no">sphinxbase/ckd_alloc.h</includes>
    <includes id="err_8h" name="err.h" local="no" imported="no">sphinxbase/err.h</includes>
    <includes id="pio_8h" name="pio.h" local="no" imported="no">sphinxbase/pio.h</includes>
    <includes id="strfuncs_8h" name="strfuncs.h" local="no" imported="no">sphinxbase/strfuncs.h</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>sphinx__lm__eval_8c.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ad_play_t</name>
    <filename>structad__play__t.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>sps</name>
      <anchorfile>structad__play__t.html</anchorfile>
      <anchor>aa183d6146e18a876b8eb7a7b6f09bfc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>bps</name>
      <anchorfile>structad__play__t.html</anchorfile>
      <anchor>afb37e59f996e4de0123af01f258ea0f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ad_rec_t</name>
    <filename>structad__rec__t.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>sps</name>
      <anchorfile>structad__rec__t.html</anchorfile>
      <anchor>ac8ccccdc755f68cb4ad24007b36d6c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>bps</name>
      <anchorfile>structad__rec__t.html</anchorfile>
      <anchor>ade5a608978908d87deea7fa9827f8510</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>agc_s</name>
    <filename>structagc__s.html</filename>
    <member kind="variable">
      <type>mfcc_t</type>
      <name>max</name>
      <anchorfile>structagc__s.html</anchorfile>
      <anchor>a6a55c54c76a2e0373a907d186b89fa8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t</type>
      <name>obs_max</name>
      <anchorfile>structagc__s.html</anchorfile>
      <anchor>a20c5289a6328895101e89cc3b418a1e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>obs_frame</name>
      <anchorfile>structagc__s.html</anchorfile>
      <anchor>a5a6c2e967089085bd4f6020876bcb92a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>obs_utt</name>
      <anchorfile>structagc__s.html</anchorfile>
      <anchor>ae4ce95dcfb26c7f14ea316ac3ab202b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t</type>
      <name>obs_max_sum</name>
      <anchorfile>structagc__s.html</anchorfile>
      <anchor>a760e1204ad4a77903c99d549dfaff3ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t</type>
      <name>noise_thresh</name>
      <anchorfile>structagc__s.html</anchorfile>
      <anchor>a4c896e65da00c79b77b23272474fcffc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>alist</name>
    <filename>structalist.html</filename>
    <member kind="variable">
      <type>flag</type>
      <name>aerr</name>
      <anchorfile>structalist.html</anchorfile>
      <anchor>af470841413f5853794fa9830d1e71ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnint</type>
      <name>aunit</name>
      <anchorfile>structalist.html</anchorfile>
      <anchor>a02749fb381f7642c1d5d01902817f673</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>anytype_s</name>
    <filename>unionanytype__s.html</filename>
    <member kind="variable">
      <type>void *</type>
      <name>ptr</name>
      <anchorfile>unionanytype__s.html</anchorfile>
      <anchor>ad06e5319b02ebff60fd00113baad6cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>long</type>
      <name>i</name>
      <anchorfile>unionanytype__s.html</anchorfile>
      <anchor>a34ab20b326601115a718ed1ada34640f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned long</type>
      <name>ui</name>
      <anchorfile>unionanytype__s.html</anchorfile>
      <anchor>a702ec3b3f98e1364ce475cd5c0d3b619</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>fl</name>
      <anchorfile>unionanytype__s.html</anchorfile>
      <anchor>aa819b7996e6d9530340be88e0d218590</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>arg_s</name>
    <filename>structarg__s.html</filename>
    <member kind="variable">
      <type>char const *</type>
      <name>name</name>
      <anchorfile>structarg__s.html</anchorfile>
      <anchor>ac6c8fb7dc57cf2df9720cf96535043f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>type</name>
      <anchorfile>structarg__s.html</anchorfile>
      <anchor>ad19743ceba37f2af159b255306bb8920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char const *</type>
      <name>deflt</name>
      <anchorfile>structarg__s.html</anchorfile>
      <anchor>ab975459159f873ee06012460d16819c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char const *</type>
      <name>doc</name>
      <anchorfile>structarg__s.html</anchorfile>
      <anchor>a706be2e230dea293579e4b03043550c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>arg_t</name>
    <filename>structarg__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>audio_type_s</name>
    <filename>structaudio__type__s.html</filename>
    <member kind="variable">
      <type>char const *</type>
      <name>name</name>
      <anchorfile>structaudio__type__s.html</anchorfile>
      <anchor>a5fa19a5507e0c89c1f3113813ffd6442</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int(*</type>
      <name>detect</name>
      <anchorfile>structaudio__type__s.html</anchorfile>
      <anchor>a1c98b5bf62f7b171c7fb4eda26a72ea1</anchor>
      <arglist>)(sphinx_wave2feat_t *wtf)</arglist>
    </member>
    <member kind="variable">
      <type>int(*</type>
      <name>decode</name>
      <anchorfile>structaudio__type__s.html</anchorfile>
      <anchor>a034b6a0bede5a89d9bb4b45c9ff525f3</anchor>
      <arglist>)(sphinx_wave2feat_t *wtf)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Bigint</name>
    <filename>structBigint.html</filename>
    <member kind="variable">
      <type>struct Bigint *</type>
      <name>next</name>
      <anchorfile>structBigint.html</anchorfile>
      <anchor>a3a1296e26ef617e775d5e366e390e7fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>k</name>
      <anchorfile>structBigint.html</anchorfile>
      <anchor>a032d76e80da2f21df10c0794244d12f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>maxwds</name>
      <anchorfile>structBigint.html</anchorfile>
      <anchor>a5ffcac6f95ded3bc1fc23204f46f10d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>sign</name>
      <anchorfile>structBigint.html</anchorfile>
      <anchor>a4380eb98f7653bb74d8377c0d68d6cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>wds</name>
      <anchorfile>structBigint.html</anchorfile>
      <anchor>aa737992ebddb9d6a7e2d23bfecdb080e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ULong</type>
      <name>x</name>
      <anchorfile>structBigint.html</anchorfile>
      <anchor>ae56981315f471a190603887aee98ca99</anchor>
      <arglist>[1]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>bigram_s</name>
    <filename>structbigram__s.html</filename>
    <member kind="variable">
      <type>uint32</type>
      <name>wid</name>
      <anchorfile>structbigram__s.html</anchorfile>
      <anchor>af66faad954d56f5ceaf6ba47cdcd9b1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>prob2</name>
      <anchorfile>structbigram__s.html</anchorfile>
      <anchor>a769b8a54f864ac4844e37cfa17ed1af0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>bo_wt2</name>
      <anchorfile>structbigram__s.html</anchorfile>
      <anchor>a410991054e81251285cbc209964cdaf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>trigrams</name>
      <anchorfile>structbigram__s.html</anchorfile>
      <anchor>a11c1cb1d7c40de624f09c372b36a6857</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>wid</name>
      <anchorfile>structbigram__s.html</anchorfile>
      <anchor>ab35dcd789b6ff87406b516493cf97854</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>bit_encode_s</name>
    <filename>structbit__encode__s.html</filename>
    <member kind="variable">
      <type>FILE *</type>
      <name>fh</name>
      <anchorfile>structbit__encode__s.html</anchorfile>
      <anchor>af0c1de2333ec798aa832e762f4ee9887</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>buf</name>
      <anchorfile>structbit__encode__s.html</anchorfile>
      <anchor>af068f9ee3624aed0b0c8720d579d2c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>bbits</name>
      <anchorfile>structbit__encode__s.html</anchorfile>
      <anchor>a69d53d4800481f63b0c2b990472323f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>refcount</name>
      <anchorfile>structbit__encode__s.html</anchorfile>
      <anchor>af2862417e58a196618593631fc5e9833</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cilist</name>
    <filename>structcilist.html</filename>
    <member kind="variable">
      <type>flag</type>
      <name>cierr</name>
      <anchorfile>structcilist.html</anchorfile>
      <anchor>aaa609be8bdf78a8fc7ba35b2ed0e6083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnint</type>
      <name>ciunit</name>
      <anchorfile>structcilist.html</anchorfile>
      <anchor>a3e5d0438673d14f5889fb6a3e712a076</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>flag</type>
      <name>ciend</name>
      <anchorfile>structcilist.html</anchorfile>
      <anchor>af16867fbc88cc3b26ecdedd0259fc5f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>cifmt</name>
      <anchorfile>structcilist.html</anchorfile>
      <anchor>a8c5159e1728cd9954138ecb392f04b8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnint</type>
      <name>cirec</name>
      <anchorfile>structcilist.html</anchorfile>
      <anchor>ace7c117f446a91e75e9f920fcff86546</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>classdef_s</name>
    <filename>structclassdef__s.html</filename>
    <member kind="variable">
      <type>char **</type>
      <name>words</name>
      <anchorfile>structclassdef__s.html</anchorfile>
      <anchor>a9ebee54832926431cddd28f92f45479e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float32 *</type>
      <name>weights</name>
      <anchorfile>structclassdef__s.html</anchorfile>
      <anchor>a85eed2992fbecae4c17d2c5c7dc7aa0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_words</name>
      <anchorfile>structclassdef__s.html</anchorfile>
      <anchor>a768a3dcf739a57c145c09b55a25c8a4a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cllist</name>
    <filename>structcllist.html</filename>
    <member kind="variable">
      <type>flag</type>
      <name>cerr</name>
      <anchorfile>structcllist.html</anchorfile>
      <anchor>afce750ad0c1a89568d816ee4c2c40333</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnint</type>
      <name>cunit</name>
      <anchorfile>structcllist.html</anchorfile>
      <anchor>a5ecb27d52d6d1cdccf23f00e6586e4ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>csta</name>
      <anchorfile>structcllist.html</anchorfile>
      <anchor>a8f52d307fd020ad43a2f2e9a2d665103</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cmd_ln_s</name>
    <filename>structcmd__ln__s.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>refcount</name>
      <anchorfile>structcmd__ln__s.html</anchorfile>
      <anchor>a63fe07841bd076831696553d41fa5d2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hash_table_t *</type>
      <name>ht</name>
      <anchorfile>structcmd__ln__s.html</anchorfile>
      <anchor>a108567dbe131b18b5c795a7cec122748</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char **</type>
      <name>f_argv</name>
      <anchorfile>structcmd__ln__s.html</anchorfile>
      <anchor>a1c4c926ebe10d7fd9664573f4b173aa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>f_argc</name>
      <anchorfile>structcmd__ln__s.html</anchorfile>
      <anchor>a51088e3e7e8477f185ebc07aeb20d63f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cmd_ln_t</name>
    <filename>structcmd__ln__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>cmd_ln_val_s</name>
    <filename>structcmd__ln__val__s.html</filename>
    <member kind="variable">
      <type>anytype_t</type>
      <name>val</name>
      <anchorfile>structcmd__ln__val__s.html</anchorfile>
      <anchor>a6eec646e3d179bd16df60f5a74281835</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>type</name>
      <anchorfile>structcmd__ln__val__s.html</anchorfile>
      <anchor>a87bda73148555d31c70d7283d360aadf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cmn_t</name>
    <filename>structcmn__t.html</filename>
    <member kind="variable">
      <type>mfcc_t *</type>
      <name>cmn_mean</name>
      <anchorfile>structcmn__t.html</anchorfile>
      <anchor>aef0faa6cd93f1d9cf12659c5980aefd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t *</type>
      <name>cmn_var</name>
      <anchorfile>structcmn__t.html</anchorfile>
      <anchor>a72813f1c9423186f5bd66ecb39099eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t *</type>
      <name>sum</name>
      <anchorfile>structcmn__t.html</anchorfile>
      <anchor>adb70819b1ca822d5a4ee6dc94b3b48e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>nframe</name>
      <anchorfile>structcmn__t.html</anchorfile>
      <anchor>a456cc3313e93fa3057b658fef64a0c53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>veclen</name>
      <anchorfile>structcmn__t.html</anchorfile>
      <anchor>a10472e0ad9272f764b512ade43f37d69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>complex</name>
    <filename>structcomplex.html</filename>
    <member kind="variable">
      <type>real</type>
      <name>r</name>
      <anchorfile>structcomplex.html</anchorfile>
      <anchor>a03cba9844d71e49f4ddf7c5f3dd45822</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>i</name>
      <anchorfile>structcomplex.html</anchorfile>
      <anchor>aa55283d87e8d89c794bac746fb11d524</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>r</name>
      <anchorfile>structcomplex.html</anchorfile>
      <anchor>ab074de5c97259ff1d0c495e8ff3fdc89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>i</name>
      <anchorfile>structcomplex.html</anchorfile>
      <anchor>a94348f29e0746c91409bf02b270ec5d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cont_ad_t</name>
    <filename>structcont__ad__t.html</filename>
    <member kind="variable">
      <type>int32(*</type>
      <name>adfunc</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>aadf8527490391e283821a014c8645415</anchor>
      <arglist>)(ad_rec_t *ad, int16 *buf, int32 max)</arglist>
    </member>
    <member kind="variable">
      <type>ad_rec_t *</type>
      <name>ad</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>aae5b9d977e62424b0cf0e245485b20a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>rawmode</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a7726e8ea1bcca281a39c4b27bbb115e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16 *</type>
      <name>adbuf</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a719f5c6816cd0da0a31930a2e572b933</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>state</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a5d9420ea711733d1eea9b8f29a638fdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>read_ts</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a7b71e87abfcb3ca4ae73af34c86f955e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>seglen</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a478939247e09a8ae142c8996ec17d8c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>siglvl</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a5524c052dcd0a3d1a1c3b1fc2134b62e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>sps</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a11a4bb48870007b39f8fa46e4b8f111a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>eof</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>af7b9044b76ed3b86ce74e4e7215ca4c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>spf</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a55f701abf33b5f68f9ef4cbf95dfaf73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>adbufsize</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a5c6edc6be287f3ae013c59fef90cb4bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>prev_sample</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a54e2013d9634ec473aaf79a606fb2e0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>headfrm</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>aa0617a92c549ac916258a54ec2cdc756</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_frm</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>abed5c6e9a2e078b70fc4c30b667612b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_sample</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a7ae5362560d9edfa6c16555285487a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>tot_frm</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a4ed32427e6a785b571b1346c85481899</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>noise_level</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>af60b0f78f9959a25cf7e7bf4c4aab4d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 *</type>
      <name>pow_hist</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a01f61a105019bea12533db84351d07b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>frm_pow</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a18f146239c77ff4ca6157261acdf4083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>auto_thresh</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a9e23379bf649ee06ece20133316253e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>delta_sil</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a74a6f56fb4cbde7fc789c9b463cf2f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>delta_speech</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>afca0f69a21d9f28c9610fcefc0e7cb10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>min_noise</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>ac301114b24356aef2edccba155e3cf33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>max_noise</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>af3b50663565964bb18ebb9f9e0002421</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>winsize</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a7c61513f48e8fbc9ab6b57db66dad7b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>speech_onset</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a1b0bb7e53a2bf537ed362badddca341b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>sil_onset</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a9f5e138f4b79b59bf4daa5603d171165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>leader</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a0d42e3ac6c1e5c59c86a40f4cf26a861</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>trailer</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>aa15db1e9fbb0048225521555ab8d9388</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>thresh_speech</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a0b9333d9acc41b5bfb67f69fc22ca901</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>thresh_sil</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>adbbe28dca87d06a3ca8d2390d08ea83a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>thresh_update</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a2168183b25add085cf3aa29ddab1c8ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float32</type>
      <name>adapt_rate</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>ac22395096037175bf9a0a1f6877e5ec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>tail_state</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>ae52185e7f7dfe424060c0ff562a8858b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>win_startfrm</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a75bc7d23bfedfd79a2fd1e3ea2188e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>win_validfrm</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a14ee16922e7287ad4ce8c51c6ddb74fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_other</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>a628e5b444bde5e0eb0dc7fe8731a31a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>spseg_t *</type>
      <name>spseg_head</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>abffe61140bc2a02ae4222183b3ef6159</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>spseg_t *</type>
      <name>spseg_tail</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>ac77e8f8bd27cea3b99238d9663455972</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>rawfp</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>af8cd2a7e0ef0f4e2c825c7812a091f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>logfp</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>adbbb6765386309476549beb058a235c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_calib_frame</name>
      <anchorfile>structcont__ad__t.html</anchorfile>
      <anchor>ac6e6809727ddc78a13674478d5b527db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>doublecomplex</name>
    <filename>structdoublecomplex.html</filename>
    <member kind="variable">
      <type>doublereal</type>
      <name>r</name>
      <anchorfile>structdoublecomplex.html</anchorfile>
      <anchor>aa21d9095ea8af6f0530961e14e25d060</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>doublereal</type>
      <name>i</name>
      <anchorfile>structdoublecomplex.html</anchorfile>
      <anchor>a29ac0f1fc7a96e2344ef1464a80e2877</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fe_s</name>
    <filename>structfe__s.html</filename>
    <member kind="variable">
      <type>cmd_ln_t *</type>
      <name>config</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>abe27cd07861a2f0042f5a83f3371d0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>refcount</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>a4cdf2f8b372cfddb38a48dd770450af9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float32</type>
      <name>sampling_rate</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>af79879861c60083c1c0135c380bfe8e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>frame_rate</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>a23ca679cec8c0643dd1fa32b4e925f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>frame_shift</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>a62b189505f084007c3799faf3836b118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float32</type>
      <name>window_length</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>ae652f41503dd7b853bff8de89340703d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>frame_size</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>a72b5838a48f3a10c8ba3917d245093d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>fft_size</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>a466b997c1f544043fb3ab6f2f89e97e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>fft_order</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>a3783552280c06207510cbe576a76d1d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>feature_dimension</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>a9c876fb2d9be5f3acaad06ddebcdc4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>num_cepstra</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>a05579b3906420cddd62fdf1ded7b63ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>remove_dc</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>ac575bed8a61105f4302bd27246d4c33d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>log_spec</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>a7d3d6513ae6b60632d14c1e1d5dfe891</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>swap</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>ab08200d2bfc6d868536d802501525179</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>dither</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>abd7b32a70dc6512134e39dd54d160689</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>transform</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>a49f2e495d938acaf5c918059e99854e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float32</type>
      <name>pre_emphasis_alpha</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>aa7dc496e33955b7f06f83715c05ded8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>seed</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>a0f42573b9f0ce0247181c5dd79e16b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>frame_counter</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>a8df2a5203ac64d1dc619f99a35dd38fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>start_flag</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>aa05ae3633c2b33e77a7b8b90e769176b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>reserved</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>a18670c79bc0cd9848fdf4711c5094542</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>frame_t *</type>
      <name>ccc</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>afc472de43bd747de659dd57bc9a74fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>frame_t *</type>
      <name>sss</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>a6525c59397073d363e1844c28746fcb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>melfb_t *</type>
      <name>mel_fb</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>ae5a054dbac5e32cf028b6d6d4c9391bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>window_t *</type>
      <name>hamming_window</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>ad47433337a370e452070ffddce87e474</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16 *</type>
      <name>spch</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>a7d49693c1fa1b14bbcd25b87ad97935b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>frame_t *</type>
      <name>frame</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>a6fe89784eb5d23ee812439f427d33fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>powspec_t *</type>
      <name>spec</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>af455b0ee3f8d81ca84ac88d4ea04e860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>powspec_t *</type>
      <name>mfspec</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>a87fd448109884fc3d796b926b67697e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16 *</type>
      <name>overflow_samps</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>a7975216c6a540fa498352736404797b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>num_overflow_samps</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>ac22fe7c117ef00eb513d7d0771333ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>prior</name>
      <anchorfile>structfe__s.html</anchorfile>
      <anchor>ae6af635a19dac6426bf882a3fc5b069b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fe_warp_conf_t</name>
    <filename>structfe__warp__conf__t.html</filename>
    <member kind="variable">
      <type>void(*</type>
      <name>set_parameters</name>
      <anchorfile>structfe__warp__conf__t.html</anchorfile>
      <anchor>af1492832e59936481196045b69bbd3a4</anchor>
      <arglist>)(char const *param_str, float sampling_rate)</arglist>
    </member>
    <member kind="variable">
      <type>const char *(*</type>
      <name>doc</name>
      <anchorfile>structfe__warp__conf__t.html</anchorfile>
      <anchor>abf92db70f95af2641e45bde2fc946435</anchor>
      <arglist>)(void)</arglist>
    </member>
    <member kind="variable">
      <type>uint32(*</type>
      <name>id</name>
      <anchorfile>structfe__warp__conf__t.html</anchorfile>
      <anchor>ad2d8f08ecc1813359cf4c139837b1fca</anchor>
      <arglist>)(void)</arglist>
    </member>
    <member kind="variable">
      <type>uint32(*</type>
      <name>n_param</name>
      <anchorfile>structfe__warp__conf__t.html</anchorfile>
      <anchor>ae8f79448ff43b5881eb2e7014b0bfccb</anchor>
      <arglist>)(void)</arglist>
    </member>
    <member kind="variable">
      <type>float(*</type>
      <name>warped_to_unwarped</name>
      <anchorfile>structfe__warp__conf__t.html</anchorfile>
      <anchor>a78b2ebebcd2d9868f2c75f49efa9878b</anchor>
      <arglist>)(float nonlinear)</arglist>
    </member>
    <member kind="variable">
      <type>float(*</type>
      <name>unwarped_to_warped</name>
      <anchorfile>structfe__warp__conf__t.html</anchorfile>
      <anchor>abb8e6771351fd02c704b41d29a0e8d28</anchor>
      <arglist>)(float linear)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>print</name>
      <anchorfile>structfe__warp__conf__t.html</anchorfile>
      <anchor>ad17184000bc420a935c5f7f91b7f188c</anchor>
      <arglist>)(const char *label)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>feat_s</name>
    <filename>structfeat__s.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>refcount</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a65eb722aadd471310eff84ac5946d98f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>ab58e7419bc24969680baf4289dc756ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>cepsize</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>aee30d93416c0c392f946dacd58dec984</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_stream</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a5b4ed4ce256ddcc3e97864cbbc8547a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32 *</type>
      <name>stream_len</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a79f153013d8738796976e3de626a6772</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>window_size</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a02cf7454beea5fc6968165cfd17a7f34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_sv</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>afe74101645e3e9dafe07d78f68ddf694</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32 *</type>
      <name>sv_len</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>acfe00502fb5fb605f99b4b1f9842d650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 **</type>
      <name>subvecs</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a0a89f7965e2db52b32519d967d7d13db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t *</type>
      <name>sv_buf</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>af747bcddb70ea570fc07e8cefc2f8896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>sv_dim</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a32f835789890a70dab6271491f1400e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cmn_type_t</type>
      <name>cmn</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a3e31d666805a9183f3188249bb6ff45f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>varnorm</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a7b222bd84282defdabdba35987e7ae7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>agc_type_t</type>
      <name>agc</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a4580c133e0bb9b9e2856f66482e91d3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>compute_feat</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a0c021e8a3c3e06cfd53ff1294024f0c9</anchor>
      <arglist>)(struct feat_s *fcb, mfcc_t **input, mfcc_t **feat)</arglist>
    </member>
    <member kind="variable">
      <type>cmn_t *</type>
      <name>cmn_struct</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>af405f775cc9df57701f93f2056be3c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>agc_t *</type>
      <name>agc_struct</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a2cc3e4a25a696379e8843d36cfcf3656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t **</type>
      <name>cepbuf</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a9b5c45065c30c9b6b610e54479b3f2c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t **</type>
      <name>tmpcepbuf</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a0ffb1581086d94546b5e91e9ab685cb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>bufpos</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a9bd6277ec5f03e103b9c8a67579a2822</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>curpos</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>ad27f63c459eb46462e28b2a23d8f8a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t ***</type>
      <name>lda</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a2c54fea16330caf82c5f516137c2d454</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>n_lda</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>a2078107cc1c82d6c0b4f93bfbb75dd7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>out_dim</name>
      <anchorfile>structfeat__s.html</anchorfile>
      <anchor>acbebc734e2c212aa7078b29531a78bc7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>feat_t</name>
    <filename>structfeat__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>fsg_arciter_s</name>
    <filename>structfsg__arciter__s.html</filename>
    <member kind="variable">
      <type>hash_iter_t *</type>
      <name>itor</name>
      <anchorfile>structfsg__arciter__s.html</anchorfile>
      <anchor>a74aaa5ebff00f4dfe5dfdfe2dc3a1fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hash_iter_t *</type>
      <name>null_itor</name>
      <anchorfile>structfsg__arciter__s.html</anchorfile>
      <anchor>a9b71932d419732c17820aec91fbc4c0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>gnode_t *</type>
      <name>gn</name>
      <anchorfile>structfsg__arciter__s.html</anchorfile>
      <anchor>ad11c7f44550802377bb684620c43826a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fsg_link_s</name>
    <filename>structfsg__link__s.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>from_state</name>
      <anchorfile>structfsg__link__s.html</anchorfile>
      <anchor>a850cdf896c09f6dbc3c9f466dab6c7f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>to_state</name>
      <anchorfile>structfsg__link__s.html</anchorfile>
      <anchor>a8a9270888e6aeca95db7119598797db6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>logs2prob</name>
      <anchorfile>structfsg__link__s.html</anchorfile>
      <anchor>a4bc31131cca140338254c43eada509dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>wid</name>
      <anchorfile>structfsg__link__s.html</anchorfile>
      <anchor>a99b8eb916944d981adf2c492b8193d4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>fsg_model_s</name>
    <filename>structfsg__model__s.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>refcount</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>af329127556a42f6ea3b27f41a99a0b17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>ab23ae2c362f1a3b18bbe135b97dfb467</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_word</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>a99ed2894f7690a960d11e1590d11a6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_word_alloc</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>a329ae88c26111df8cd64657b46b9108f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char **</type>
      <name>vocab</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>a6bbfce2d672624d792ff964200a64031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bitvec_t *</type>
      <name>silwords</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>ab5709e67c1b7506ab024f2060d50331c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bitvec_t *</type>
      <name>altwords</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>adb51d840853d7ef3315bd833cddeb748</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>logmath_t *</type>
      <name>lmath</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>ab0b22dadb593ee1901829f89c4a47fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_state</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>a80cdb0b5e7463221ce14135c9f5a3b01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>start_state</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>a4ff49da3938ecc236d45a68d009f97b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>final_state</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>ada19c76db4f1fc89c8b5cd674ec865da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float32</type>
      <name>lw</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>aeaff529953d494b9891dbc0fdac8e97f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>trans_list_t *</type>
      <name>trans</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>ac5cd4b72818b7a9f2dc543d6a6ac9cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>listelem_alloc_t *</type>
      <name>link_alloc</name>
      <anchorfile>structfsg__model__s.html</anchorfile>
      <anchor>ac4e2a36305bbe62a5c7468588eb058b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gnode_s</name>
    <filename>structgnode__s.html</filename>
    <member kind="variable">
      <type>anytype_t</type>
      <name>data</name>
      <anchorfile>structgnode__s.html</anchorfile>
      <anchor>ab1a86d92c42a5b45865a1db2a511b159</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct gnode_s *</type>
      <name>next</name>
      <anchorfile>structgnode__s.html</anchorfile>
      <anchor>a24798080e363f9ecf9f348022c582757</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hash_entry_s</name>
    <filename>structhash__entry__s.html</filename>
    <member kind="variable">
      <type>const char *</type>
      <name>key</name>
      <anchorfile>structhash__entry__s.html</anchorfile>
      <anchor>a2566ac1233761789585363a283385321</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>len</name>
      <anchorfile>structhash__entry__s.html</anchorfile>
      <anchor>af1ec5f16059ced6d9a8ae4d36ca7e2b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>val</name>
      <anchorfile>structhash__entry__s.html</anchorfile>
      <anchor>a0d57012963084fed93886681108aa636</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct hash_entry_s *</type>
      <name>next</name>
      <anchorfile>structhash__entry__s.html</anchorfile>
      <anchor>aa855ac854b9c36cf23f60d9ac8093e7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hash_iter_s</name>
    <filename>structhash__iter__s.html</filename>
    <member kind="variable">
      <type>hash_table_t *</type>
      <name>ht</name>
      <anchorfile>structhash__iter__s.html</anchorfile>
      <anchor>a02844d3426aaa62e41086c98a052ed7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hash_entry_t *</type>
      <name>ent</name>
      <anchorfile>structhash__iter__s.html</anchorfile>
      <anchor>a8aa7d6656a165e2e74c42ae4c48ed78f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>idx</name>
      <anchorfile>structhash__iter__s.html</anchorfile>
      <anchor>a9cb2842206d721ef3ef9b15c133ba3c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>hash_table_t</name>
    <filename>structhash__table__t.html</filename>
    <member kind="variable">
      <type>hash_entry_t *</type>
      <name>table</name>
      <anchorfile>structhash__table__t.html</anchorfile>
      <anchor>ae2ada8f08a449a7dedff357c9a343e0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>size</name>
      <anchorfile>structhash__table__t.html</anchorfile>
      <anchor>a34cc067a2c4f517ce8b8921965d0f8dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>inuse</name>
      <anchorfile>structhash__table__t.html</anchorfile>
      <anchor>a8c691525a04e01751972d608948c8ac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>nocase</name>
      <anchorfile>structhash__table__t.html</anchorfile>
      <anchor>a09ea72a33026b9a77f76811062a4d692</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>heap_s</name>
    <filename>structheap__s.html</filename>
    <member kind="variable">
      <type>heapnode_t *</type>
      <name>top</name>
      <anchorfile>structheap__s.html</anchorfile>
      <anchor>a49112ecdaba43b95768ba52b734f2457</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>heapnode_s</name>
    <filename>structheapnode__s.html</filename>
    <member kind="variable">
      <type>void *</type>
      <name>data</name>
      <anchorfile>structheapnode__s.html</anchorfile>
      <anchor>a2cac1684dd94b922db98de988232efeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>val</name>
      <anchorfile>structheapnode__s.html</anchorfile>
      <anchor>a02a74be7915860cf3fc436d5fed6fe7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>nl</name>
      <anchorfile>structheapnode__s.html</anchorfile>
      <anchor>a9fd3eb832298ae9ca73896835d38e6d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>nr</name>
      <anchorfile>structheapnode__s.html</anchorfile>
      <anchor>ab5a21ee1a48ce5359bbcca1d416a51eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct heapnode_s *</type>
      <name>l</name>
      <anchorfile>structheapnode__s.html</anchorfile>
      <anchor>af25b6bfb16162294dd35851e04ad6c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct heapnode_s *</type>
      <name>r</name>
      <anchorfile>structheapnode__s.html</anchorfile>
      <anchor>a92c30e27e1ccdbaea15f28aa49b0f7ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>huff_code_s</name>
    <filename>structhuff__code__s.html</filename>
    <member kind="variable">
      <type>int16</type>
      <name>refcount</name>
      <anchorfile>structhuff__code__s.html</anchorfile>
      <anchor>a00599771bfc6d91019f2e5fdcff7721f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>maxbits</name>
      <anchorfile>structhuff__code__s.html</anchorfile>
      <anchor>a591fbcc9dba9ac9052c1133a5e5be44e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>type</name>
      <anchorfile>structhuff__code__s.html</anchorfile>
      <anchor>adaa25cfceee105cd6acda43ac38bbae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32 *</type>
      <name>firstcode</name>
      <anchorfile>structhuff__code__s.html</anchorfile>
      <anchor>a09f2cca3a019e8dfdc44044cfd075325</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32 *</type>
      <name>numl</name>
      <anchorfile>structhuff__code__s.html</anchorfile>
      <anchor>a844c2ae3f1164eda3c4145c499fc9d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>huff_codeword_t **</type>
      <name>syms</name>
      <anchorfile>structhuff__code__s.html</anchorfile>
      <anchor>aa774a9726870415e4db6bd3859edecba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hash_table_t *</type>
      <name>codewords</name>
      <anchorfile>structhuff__code__s.html</anchorfile>
      <anchor>ace4c3c6e717f01340e2596218821776f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>fh</name>
      <anchorfile>structhuff__code__s.html</anchorfile>
      <anchor>a83e1e8aa93391128edb5c1b76aa6aed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bit_encode_t *</type>
      <name>be</name>
      <anchorfile>structhuff__code__s.html</anchorfile>
      <anchor>a6f3275772bb555b17e011e2a3e2f950a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>boff</name>
      <anchorfile>structhuff__code__s.html</anchorfile>
      <anchor>ac447f84ac85737d25d8d424b56f98471</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>huff_codeword_s</name>
    <filename>structhuff__codeword__s.html</filename>
    <member kind="variable">
      <type>union huff_codeword_s::@4</type>
      <name>r</name>
      <anchorfile>structhuff__codeword__s.html</anchorfile>
      <anchor>a3d28b15aec6331dc791069b153bab62c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>ival</name>
      <anchorfile>unionhuff__codeword__s_1_1@4.html</anchorfile>
      <anchor>a1f86d7fada63c580f2a7088579d49ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>sval</name>
      <anchorfile>unionhuff__codeword__s_1_1@4.html</anchorfile>
      <anchor>a8535017b96f1b7abd04d774f85999d59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>nbits</name>
      <anchorfile>structhuff__codeword__s.html</anchorfile>
      <anchor>a65ee3544c6d5b8ed6622c48e5bfebb42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>codeword</name>
      <anchorfile>structhuff__codeword__s.html</anchorfile>
      <anchor>aa38efab66a47adcf01b055fdf2227078</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>huff_node_s</name>
    <filename>structhuff__node__s.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>nbits</name>
      <anchorfile>structhuff__node__s.html</anchorfile>
      <anchor>aa0f491c066e18b9b4c083508930cd070</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct huff_node_s *</type>
      <name>l</name>
      <anchorfile>structhuff__node__s.html</anchorfile>
      <anchor>a2e557859d98f55371e14ed8ee19b6ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>union huff_node_s::@3</type>
      <name>r</name>
      <anchorfile>structhuff__node__s.html</anchorfile>
      <anchor>ae1514c98f94e689587a79b2517a38535</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>ival</name>
      <anchorfile>unionhuff__node__s_1_1@3.html</anchorfile>
      <anchor>a688a08cfd00bd922ca104688958eb412</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>sval</name>
      <anchorfile>unionhuff__node__s_1_1@3.html</anchorfile>
      <anchor>a38b3d5a51e00d60a73bb7df1c5fd8c49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct huff_node_s *</type>
      <name>r</name>
      <anchorfile>unionhuff__node__s_1_1@3.html</anchorfile>
      <anchor>a5e51536050b9ad0c58216bebdaaf9295</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>icilist</name>
    <filename>structicilist.html</filename>
    <member kind="variable">
      <type>flag</type>
      <name>icierr</name>
      <anchorfile>structicilist.html</anchorfile>
      <anchor>aee2f6c57bb6df08adfc9d62a185f999a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>iciunit</name>
      <anchorfile>structicilist.html</anchorfile>
      <anchor>a4da4c2525fa8e39989ddc28f99b86b13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>flag</type>
      <name>iciend</name>
      <anchorfile>structicilist.html</anchorfile>
      <anchor>a598f4d4f880c560238c7a32f5dcb3e51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>icifmt</name>
      <anchorfile>structicilist.html</anchorfile>
      <anchor>a3689b68768a386cbcc460eb2632118e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnint</type>
      <name>icirlen</name>
      <anchorfile>structicilist.html</anchorfile>
      <anchor>ac6025ddf8b1ade5cb73d607dd2d30501</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnint</type>
      <name>icirnum</name>
      <anchorfile>structicilist.html</anchorfile>
      <anchor>a6e4cb8719f1c76ee87273671448da892</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>inlist</name>
    <filename>structinlist.html</filename>
    <member kind="variable">
      <type>flag</type>
      <name>inerr</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>a58bf72b64fab5d27aa0f7ef878d5c8d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnint</type>
      <name>inunit</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>a69244da0365f1012d4ed89d569c7e687</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>infile</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>a335023ababe7eb52a89577de0a1f155c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnlen</type>
      <name>infilen</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>a09d868ed15261e31dfe2d6471d3f73e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnint *</type>
      <name>inex</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>a6266bd70b0f26d29d084e9e159cf7907</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnint *</type>
      <name>inopen</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>a791dfdf3cc38883912c17f44dfbbb2af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnint *</type>
      <name>innum</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>a0827d903d61f0f02e48414de0893e7a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnint *</type>
      <name>innamed</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>a020090cdbc0134b62d96dee447ded084</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>inname</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>ac34ac359c5711418bc7a0fe50bc017e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnlen</type>
      <name>innamlen</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>ae975e40f5e868451a31221c7cfe4da4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>inacc</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>aa4fb66e031aa3c7c4d8659145091ff6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnlen</type>
      <name>inacclen</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>a78dde025010d1d60468984985467e5a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>inseq</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>a31bfcb7364ef9a1fd38262997247ca67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnlen</type>
      <name>inseqlen</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>a552769caaf819b20716b02e9c713880d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>indir</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>aaff7195ea86562d29a61cb609145f01d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnlen</type>
      <name>indirlen</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>a17804ade39a70636a3f8ff551847b7b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>infmt</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>a48b9f02a979e0e160e58e335e2c4ea9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnlen</type>
      <name>infmtlen</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>afbb4864f07c6e2c17d03cf936e6c1132</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>inform</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>a990d5a197e15fce7513d83942602f08a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnint</type>
      <name>informlen</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>aacc22fa1618d60aab28463a4d6b9dbe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>inunf</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>af5807b5c897be8635d1bbca8c5cf9e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnlen</type>
      <name>inunflen</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>a4a5e555086d129a2b8edc7d2ff3b3725</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnint *</type>
      <name>inrecl</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>ad11fedcf60bcfb643548dc8992f8774c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnint *</type>
      <name>innrec</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>a0d5491f5ed82c5e4f787ac0411fd7600</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>inblank</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>a3cbc44275b6c1cab2d1aad14af0b3318</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnlen</type>
      <name>inblanklen</name>
      <anchorfile>structinlist.html</anchorfile>
      <anchor>a2aec2496017c66c3ba0d96adcb2b37a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jsgf_atom_s</name>
    <filename>structjsgf__atom__s.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structjsgf__atom__s.html</anchorfile>
      <anchor>ac7473e48f49258c5e5ef65bbb669b19e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>glist_t</type>
      <name>tags</name>
      <anchorfile>structjsgf__atom__s.html</anchorfile>
      <anchor>a4ecab128d84fd748efe52e338e7e2ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>weight</name>
      <anchorfile>structjsgf__atom__s.html</anchorfile>
      <anchor>a50672ba6d1e24c55bf8b58b97114effa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jsgf_link_s</name>
    <filename>structjsgf__link__s.html</filename>
    <member kind="variable">
      <type>jsgf_atom_t *</type>
      <name>atom</name>
      <anchorfile>structjsgf__link__s.html</anchorfile>
      <anchor>a140a7cfbe76100928b9c7ea052435ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>from</name>
      <anchorfile>structjsgf__link__s.html</anchorfile>
      <anchor>a02f9b2bc3b98e802164e80d051923bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>to</name>
      <anchorfile>structjsgf__link__s.html</anchorfile>
      <anchor>a9da8ad9d87149f0cfca6ca815c581717</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jsgf_rhs_s</name>
    <filename>structjsgf__rhs__s.html</filename>
    <member kind="variable">
      <type>glist_t</type>
      <name>atoms</name>
      <anchorfile>structjsgf__rhs__s.html</anchorfile>
      <anchor>a53c517a31c83eb357764fb891bba7008</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jsgf_rhs_t *</type>
      <name>alt</name>
      <anchorfile>structjsgf__rhs__s.html</anchorfile>
      <anchor>ad07cf44d48798d86633b37e9e6e67ff5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jsgf_rule_s</name>
    <filename>structjsgf__rule__s.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>refcnt</name>
      <anchorfile>structjsgf__rule__s.html</anchorfile>
      <anchor>aeb4c05f6daa425a37d362e2c6de1228e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structjsgf__rule__s.html</anchorfile>
      <anchor>a1b1de5afa4c0f27df4e8d51ebc47ca92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>public</name>
      <anchorfile>structjsgf__rule__s.html</anchorfile>
      <anchor>acf6dcb033906d79f3c10d411aad4e318</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jsgf_rhs_t *</type>
      <name>rhs</name>
      <anchorfile>structjsgf__rule__s.html</anchorfile>
      <anchor>a6923b74ad72f8b663cc00dfa99490981</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>entry</name>
      <anchorfile>structjsgf__rule__s.html</anchorfile>
      <anchor>a0d54a847059e9690854a9776cb5051e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>exit</name>
      <anchorfile>structjsgf__rule__s.html</anchorfile>
      <anchor>a9bdd64ed40fe86c14a2f0bf01252b069</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>jsgf_s</name>
    <filename>structjsgf__s.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>version</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>ad459d19b47134a9670ffa4e8c466c0df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>charset</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>ac7cba2982a4c14503afbe1df5f208002</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>locale</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>a0423fa12efb23c307765d7d010908e0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>ab418c438a9c7f7e8aee029f006897656</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hash_table_t *</type>
      <name>rules</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>af257160279ab56ffca65966aeac18ef9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hash_table_t *</type>
      <name>imports</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>a7efd071684d4ef7f077b0b06ce7bbc78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>jsgf_t *</type>
      <name>parent</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>af05b28c1350c76d64539403791522128</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>glist_t</type>
      <name>searchpath</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>aabb207f0909c661a831e5f931dd9f60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nstate</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>a380c1b82e1bd776438303159e5129773</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>glist_t</type>
      <name>links</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>a6ee31bac19680f01c413969a75ad838a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>glist_t</type>
      <name>rulestack</name>
      <anchorfile>structjsgf__s.html</anchorfile>
      <anchor>a0980112df6f2f591e64158266eb04b69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lineiter_t</name>
    <filename>structlineiter__t.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>buf</name>
      <anchorfile>structlineiter__t.html</anchorfile>
      <anchor>a1bf482b3c2722af76102f7b4aae08e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>bsiz</name>
      <anchorfile>structlineiter__t.html</anchorfile>
      <anchor>ab9aef9582ea19e23370fab75981ae022</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>len</name>
      <anchorfile>structlineiter__t.html</anchorfile>
      <anchor>ad7faa6892d4a6d9e4e41c6d7dce4b590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>fh</name>
      <anchorfile>structlineiter__t.html</anchorfile>
      <anchor>a08628d796a4850494f29f62dc0e55148</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>clean</name>
      <anchorfile>structlineiter__t.html</anchorfile>
      <anchor>a800c26617f85d52aa4f3c8f6c3e6f96a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>lineno</name>
      <anchorfile>structlineiter__t.html</anchorfile>
      <anchor>ae8215b7dfb61b9718dab96c7c9d22311</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>listelem_alloc_s</name>
    <filename>structlistelem__alloc__s.html</filename>
    <member kind="variable">
      <type>char **</type>
      <name>freelist</name>
      <anchorfile>structlistelem__alloc__s.html</anchorfile>
      <anchor>a2c3be8623c5bb2d4afb3ad888790a4eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>glist_t</type>
      <name>blocks</name>
      <anchorfile>structlistelem__alloc__s.html</anchorfile>
      <anchor>a1216578b1d5416dc0a03c802cfa1def9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>glist_t</type>
      <name>blocksize</name>
      <anchorfile>structlistelem__alloc__s.html</anchorfile>
      <anchor>ada7b3fcd2f878e67e07e4bb185bb3015</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>elemsize</name>
      <anchorfile>structlistelem__alloc__s.html</anchorfile>
      <anchor>a9e27c7163c45a43f8dfd667cbc014f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>blk_alloc</name>
      <anchorfile>structlistelem__alloc__s.html</anchorfile>
      <anchor>ab96fd1e097105a34d6ae2e79ae8e2520</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>n_blocks</name>
      <anchorfile>structlistelem__alloc__s.html</anchorfile>
      <anchor>a90c7d399a72d00cdb476bd5f518b4711</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>n_alloc</name>
      <anchorfile>structlistelem__alloc__s.html</anchorfile>
      <anchor>a2a2fa0a7a1e03d6aee2f685dbc1db774</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>n_freed</name>
      <anchorfile>structlistelem__alloc__s.html</anchorfile>
      <anchor>adde313f665b6f2be9ea22f4d209e576d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lm3g_iter_s</name>
    <filename>structlm3g__iter__s.html</filename>
    <member kind="variable">
      <type>ngram_iter_t</type>
      <name>base</name>
      <anchorfile>structlm3g__iter__s.html</anchorfile>
      <anchor>ae24753ad344180c9b3a6162444ecbc3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unigram_t *</type>
      <name>ug</name>
      <anchorfile>structlm3g__iter__s.html</anchorfile>
      <anchor>a8a4ce73a4ae6d75de2682c84ae345b1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bigram_t *</type>
      <name>bg</name>
      <anchorfile>structlm3g__iter__s.html</anchorfile>
      <anchor>a484e0af0540b59dced50e8f39a7bf691</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>trigram_t *</type>
      <name>tg</name>
      <anchorfile>structlm3g__iter__s.html</anchorfile>
      <anchor>af8d3b111d9a5f98c1e2830866c72658a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>lm3g_model_s</name>
    <filename>structlm3g__model__s.html</filename>
    <member kind="variable">
      <type>unigram_t *</type>
      <name>unigrams</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>a94b4a80531261a20036cbc41b76b3f3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bigram_t *</type>
      <name>bigrams</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>a58e72d8dd17a928d1e150e95483092ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>trigram_t *</type>
      <name>trigrams</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>a9d10497789f7406433bccae79db63b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lmprob_t *</type>
      <name>prob2</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>a34acf8c1ffaa4bb712ce1196eea59678</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_prob2</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>a273e6ea4c39d1a563cc59f00b4b6ee98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lmprob_t *</type>
      <name>bo_wt2</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>a7ee629aa1b8e88529127cf4da470d80f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_bo_wt2</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>ad4bbdd65d13712fe653afe8b1de9b096</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lmprob_t *</type>
      <name>prob3</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>adc9ed2ad1f2daefdd40713a9dd371673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_prob3</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>add28369f51e657ee54deed5291c84d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 *</type>
      <name>tseg_base</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>a6cec34be6a748a9cece94ae3dfc1e8d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>tginfo_t **</type>
      <name>tginfo</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>a9be0c8197334e3ef632e9e3abdad6a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>listelem_alloc_t *</type>
      <name>le</name>
      <anchorfile>structlm3g__model__s.html</anchorfile>
      <anchor>a2c96ba8aa34632e4d42908f9384d1b01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>lmprob_t</name>
    <filename>unionlmprob__t.html</filename>
    <member kind="variable">
      <type>float32</type>
      <name>f</name>
      <anchorfile>unionlmprob__t.html</anchorfile>
      <anchor>a464d8d65be6af6899dcf63247e6f2b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>l</name>
      <anchorfile>unionlmprob__t.html</anchorfile>
      <anchor>ac48a650d5ef403456974654eaec688ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>logadd_s</name>
    <filename>structlogadd__s.html</filename>
    <member kind="variable">
      <type>void *</type>
      <name>table</name>
      <anchorfile>structlogadd__s.html</anchorfile>
      <anchor>a27793577d513d85cd73c2daffc140695</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>table_size</name>
      <anchorfile>structlogadd__s.html</anchorfile>
      <anchor>a484c53a05b46d863d0456af679cee5d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>width</name>
      <anchorfile>structlogadd__s.html</anchorfile>
      <anchor>a8e35a353d751d957270baf5192007c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int8</type>
      <name>shift</name>
      <anchorfile>structlogadd__s.html</anchorfile>
      <anchor>a4000a49e71ed2c09da4f34cb5ccaed4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>logmath_s</name>
    <filename>structlogmath__s.html</filename>
    <member kind="variable">
      <type>logadd_t</type>
      <name>t</name>
      <anchorfile>structlogmath__s.html</anchorfile>
      <anchor>a8128c2dc99788cd1140504de03a182cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>refcount</name>
      <anchorfile>structlogmath__s.html</anchorfile>
      <anchor>af20b1897bbb2061f5704dd76890781be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mmio_file_t *</type>
      <name>filemap</name>
      <anchorfile>structlogmath__s.html</anchorfile>
      <anchor>a6b7c95974727d2566f130a7fd93b8fd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>base</name>
      <anchorfile>structlogmath__s.html</anchorfile>
      <anchor>abade3e0bb62073594c0ddb45daffdd69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>log_of_base</name>
      <anchorfile>structlogmath__s.html</anchorfile>
      <anchor>a0becd44845d6de8202bbef9899c700f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>log10_of_base</name>
      <anchorfile>structlogmath__s.html</anchorfile>
      <anchor>a9bf249310e227519d0833115a167267d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>inv_log_of_base</name>
      <anchorfile>structlogmath__s.html</anchorfile>
      <anchor>a18878cad028ad0782c48c0c94d0b4502</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>inv_log10_of_base</name>
      <anchorfile>structlogmath__s.html</anchorfile>
      <anchor>ac06a1d19f15cb52efaa26480d3b60fa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>zero</name>
      <anchorfile>structlogmath__s.html</anchorfile>
      <anchor>a2db90a43a96bb844185f11ff6f88190d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>melfb_s</name>
    <filename>structmelfb__s.html</filename>
    <member kind="variable">
      <type>float32</type>
      <name>sampling_rate</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>a6481b2124bb1c1f2dd17cfaceef34b10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>num_cepstra</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>a1f196e53dd4933196b2a3aef1d2597a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>num_filters</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>a3cb5379f4a24effa719296edaf484109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>fft_size</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>a9af4273d9de3551b7ce782618d9acb3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float32</type>
      <name>lower_filt_freq</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>a11a5ccdcbffb5e1cc21909c4af30d494</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float32</type>
      <name>upper_filt_freq</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>ac94388ee3f0ac984a0957fc90eb8bf6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t **</type>
      <name>mel_cosine</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>a8836cd634ec20bc853d3c70e0c5fb768</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t *</type>
      <name>filt_coeffs</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>a37da6d455b352696ac8340d1e77c622f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16 *</type>
      <name>spec_start</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>a2586c719e90eb09baadc11add2ba3fbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16 *</type>
      <name>filt_start</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>a24cdb5e426b96d0e97720dfad3a70df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16 *</type>
      <name>filt_width</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>a43c26968a65602f1dce3c02e155eea39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>doublewide</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>a2f1a3b5e9a985a88dd0a0c57c8e8e682</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char const *</type>
      <name>warp_type</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>a925f6f7a98b33b542f6b53f7c0b1b923</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char const *</type>
      <name>warp_params</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>aa7ba71c21972a822ba7f23391ff92b21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>warp_id</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>a3b4d756c484accf39aeac42219b2c7ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t</type>
      <name>sqrt_inv_n</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>a1d222190206f979da6f1297197bb6e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t</type>
      <name>sqrt_inv_2n</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>a09439f191bdf50d17505f0cfcabda229</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>lifter_val</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>a605228aea9e9c9028caad09060a07b2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t *</type>
      <name>lifter</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>a362672e537cb316c538fccc141ad01f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>unit_area</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>a9fc76cc06249cb211c35c04a31c8a3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>round_filters</name>
      <anchorfile>structmelfb__s.html</anchorfile>
      <anchor>ac2db1578287bd1f5a9b5eed94cc0d987</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>mmio_file_s</name>
    <filename>structmmio__file__s.html</filename>
    <member kind="variable">
      <type>void *</type>
      <name>ptr</name>
      <anchorfile>structmmio__file__s.html</anchorfile>
      <anchor>ae1fe8bd596a0906965970108fa849b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>mapsize</name>
      <anchorfile>structmmio__file__s.html</anchorfile>
      <anchor>ab2357ad8c44382d8ccd679801692a718</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>Multitype</name>
    <filename>unionMultitype.html</filename>
    <member kind="variable">
      <type>shortint</type>
      <name>h</name>
      <anchorfile>unionMultitype.html</anchorfile>
      <anchor>a556d63188675caed2d40a14cbfe740e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>integer</type>
      <name>i</name>
      <anchorfile>unionMultitype.html</anchorfile>
      <anchor>a8b913dac6031042a8f5192ee033bb5f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>r</name>
      <anchorfile>unionMultitype.html</anchorfile>
      <anchor>ab4eba1c6e83e32ee5b08b7550b46907c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>doublereal</type>
      <name>d</name>
      <anchorfile>unionMultitype.html</anchorfile>
      <anchor>ad14eee30c207909f64d8adc2110dc8a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>complex</type>
      <name>c</name>
      <anchorfile>unionMultitype.html</anchorfile>
      <anchor>a30e3bb4e990a88a087fad898df096868</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>doublecomplex</type>
      <name>z</name>
      <anchorfile>unionMultitype.html</anchorfile>
      <anchor>aa031f83e1db7e8f751458cebe7b9d897</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Namelist</name>
    <filename>structNamelist.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structNamelist.html</anchorfile>
      <anchor>a43f48d333d37610aa80483ee76c78d26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vardesc **</type>
      <name>vars</name>
      <anchorfile>structNamelist.html</anchorfile>
      <anchor>a5e41f1eccfc8b25536f76c1ced89c3fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>nvars</name>
      <anchorfile>structNamelist.html</anchorfile>
      <anchor>a30a6e0a05803290fed780890bcc436fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_class_s</name>
    <filename>structngram__class__s.html</filename>
    <class kind="struct">ngram_class_s::ngram_hash_s</class>
    <member kind="variable">
      <type>int32</type>
      <name>tag_wid</name>
      <anchorfile>structngram__class__s.html</anchorfile>
      <anchor>ab5f3cc0142c9fd91b3c3d0e59906b556</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>start_wid</name>
      <anchorfile>structngram__class__s.html</anchorfile>
      <anchor>a370c88602c7c1f7e3ff1a767c027f5cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_words</name>
      <anchorfile>structngram__class__s.html</anchorfile>
      <anchor>af13562cbc44647435f315b18df5688dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 *</type>
      <name>prob1</name>
      <anchorfile>structngram__class__s.html</anchorfile>
      <anchor>a50077f48f135f1c666745a21574e4205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct ngram_class_s::ngram_hash_s *</type>
      <name>nword_hash</name>
      <anchorfile>structngram__class__s.html</anchorfile>
      <anchor>aab28f6b41e4020455ff2484a6fa850bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_hash</name>
      <anchorfile>structngram__class__s.html</anchorfile>
      <anchor>a7f450019eb6dc2e31b18eb3ab6009920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_hash_inuse</name>
      <anchorfile>structngram__class__s.html</anchorfile>
      <anchor>a79438cd582363800bc05da31a9ca49d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_class_s::ngram_hash_s</name>
    <filename>structngram__class__s_1_1ngram__hash__s.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>wid</name>
      <anchorfile>structngram__class__s_1_1ngram__hash__s.html</anchorfile>
      <anchor>ad0178b5a86ec23ce790b6b7cb64db0b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>prob1</name>
      <anchorfile>structngram__class__s_1_1ngram__hash__s.html</anchorfile>
      <anchor>a6ac4c01b0c8d29f770f4780e38ab0923</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>next</name>
      <anchorfile>structngram__class__s_1_1ngram__hash__s.html</anchorfile>
      <anchor>a88ede5798cadc2bece12c49fa038b090</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_funcs_s</name>
    <filename>structngram__funcs__s.html</filename>
    <member kind="variable">
      <type>void(*</type>
      <name>free</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>a4211130880131f38e16022985816952f</anchor>
      <arglist>)(ngram_model_t *model)</arglist>
    </member>
    <member kind="variable">
      <type>int(*</type>
      <name>apply_weights</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>abfd7e53c672aef5a34ec5114ec475916</anchor>
      <arglist>)(ngram_model_t *model, float32 lw, float32 wip, float32 uw)</arglist>
    </member>
    <member kind="variable">
      <type>int32(*</type>
      <name>score</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>a81b0c7948179c2572fb274401b82278e</anchor>
      <arglist>)(ngram_model_t *model, int32 wid, int32 *history, int32 n_hist, int32 *n_used)</arglist>
    </member>
    <member kind="variable">
      <type>int32(*</type>
      <name>raw_score</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>a2a64c66491914168bd830237cc93b16c</anchor>
      <arglist>)(ngram_model_t *model, int32 wid, int32 *history, int32 n_hist, int32 *n_used)</arglist>
    </member>
    <member kind="variable">
      <type>int32(*</type>
      <name>add_ug</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>a6d553c95c7f4da4993f2b9df757ac016</anchor>
      <arglist>)(ngram_model_t *model, int32 wid, int32 lweight)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>flush</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>a7abf2864db9c8e8d1d5909ea92144ffe</anchor>
      <arglist>)(ngram_model_t *model)</arglist>
    </member>
    <member kind="variable">
      <type>ngram_iter_t *(*</type>
      <name>iter</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>a8148f132a986660ff500e46f9b2ea1c1</anchor>
      <arglist>)(ngram_model_t *model, int32 wid, int32 *history, int32 n_hist)</arglist>
    </member>
    <member kind="variable">
      <type>ngram_iter_t *(*</type>
      <name>mgrams</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>a3a264fcbdbe8b4b342c533af090cfe8f</anchor>
      <arglist>)(ngram_model_t *model, int32 m)</arglist>
    </member>
    <member kind="variable">
      <type>ngram_iter_t *(*</type>
      <name>successors</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>af83b5620eb7bc37984ad522b66e266ad</anchor>
      <arglist>)(ngram_iter_t *itor)</arglist>
    </member>
    <member kind="variable">
      <type>int32 const *(*</type>
      <name>iter_get</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>ac515e6ad9a1afbda6b74e8204fd460b5</anchor>
      <arglist>)(ngram_iter_t *itor, int32 *out_score, int32 *out_bowt)</arglist>
    </member>
    <member kind="variable">
      <type>ngram_iter_t *(*</type>
      <name>iter_next</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>a57777056985f8adc3494e859c1102f3e</anchor>
      <arglist>)(ngram_iter_t *itor)</arglist>
    </member>
    <member kind="variable">
      <type>void(*</type>
      <name>iter_free</name>
      <anchorfile>structngram__funcs__s.html</anchorfile>
      <anchor>ad7031e996c16516cf7f52e7a4adee4bb</anchor>
      <arglist>)(ngram_iter_t *itor)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_iter_s</name>
    <filename>structngram__iter__s.html</filename>
    <member kind="variable">
      <type>ngram_model_t *</type>
      <name>model</name>
      <anchorfile>structngram__iter__s.html</anchorfile>
      <anchor>a6d8dff08c934f9153cffe70fd4961ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 *</type>
      <name>wids</name>
      <anchorfile>structngram__iter__s.html</anchorfile>
      <anchor>a1362ebe2dcf1c441929c845fc97958cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>m</name>
      <anchorfile>structngram__iter__s.html</anchorfile>
      <anchor>a80bce30ba5b180f85ca84d7288715858</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>successor</name>
      <anchorfile>structngram__iter__s.html</anchorfile>
      <anchor>a7802a7883b1cc246b1bff629cd2cfb08</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_model_arpa_s</name>
    <filename>structngram__model__arpa__s.html</filename>
    <member kind="variable">
      <type>ngram_model_t</type>
      <name>base</name>
      <anchorfile>structngram__model__arpa__s.html</anchorfile>
      <anchor>ab09caa709057492ca333e7349e006c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lm3g_model_t</type>
      <name>lm3g</name>
      <anchorfile>structngram__model__arpa__s.html</anchorfile>
      <anchor>abe1aa64587afdcb6134c0efaad622e78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sorted_list_t</type>
      <name>sorted_prob2</name>
      <anchorfile>structngram__model__arpa__s.html</anchorfile>
      <anchor>a3ce912671b868fa1ebc556c0776e2246</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sorted_list_t</type>
      <name>sorted_bo_wt2</name>
      <anchorfile>structngram__model__arpa__s.html</anchorfile>
      <anchor>ad1cc307815c424daee1ea93a7192228d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sorted_list_t</type>
      <name>sorted_prob3</name>
      <anchorfile>structngram__model__arpa__s.html</anchorfile>
      <anchor>a4975e5e7a036df540a27a19dce588388</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_model_dmp_s</name>
    <filename>structngram__model__dmp__s.html</filename>
    <member kind="variable">
      <type>ngram_model_t</type>
      <name>base</name>
      <anchorfile>structngram__model__dmp__s.html</anchorfile>
      <anchor>afd4571dc9702255aed667b5de62e5332</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lm3g_model_t</type>
      <name>lm3g</name>
      <anchorfile>structngram__model__dmp__s.html</anchorfile>
      <anchor>af889dddcba4b473e782f4a5a11ca47bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mmio_file_t *</type>
      <name>dump_mmap</name>
      <anchorfile>structngram__model__dmp__s.html</anchorfile>
      <anchor>ae86e39a2c9e3078f0d9cffc6cf384702</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_model_s</name>
    <filename>structngram__model__s.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>refcount</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a3b14986e4dc40ccec1f7e206b7f41d06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 *</type>
      <name>n_counts</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a9dcba9b49cc1cd189b257e5838da0eee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_1g_alloc</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a3e41109b30668bdfc077614c1ef49960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_words</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a74f85927ef0d5513a1e6c02d13864be3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>n</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a3c87bc1b678662a2c8930b3b8c33a80f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>n_classes</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>adeb914f8e9f011a5c960f5ee9cd33919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>writable</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a78a3253febced2cae4732044da466ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8</type>
      <name>flags</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>ac609a2f867496d6ca719351d566db328</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>logmath_t *</type>
      <name>lmath</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a2ca373109c651ac998b33153eb38fd95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float32</type>
      <name>lw</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a76ea0c65b23de80091e7c602bdb43bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>log_wip</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a3d6bf5632760a16e52cb881d7010d774</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>log_uw</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a6f0ec7b8b9d13d590bbe4b59df573abc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>log_uniform</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a616bf871a67f9cedce17d6b589ee33ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>log_uniform_weight</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>aa38c5fdecaefd9a2f43b69f26ae492c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>log_zero</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a65425a599c4bcc4dda809d81149b8fc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char **</type>
      <name>word_str</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>ae625e779e340845f03fb3da164e93039</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hash_table_t *</type>
      <name>wid</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a75567419a8002ef6e916c81f5d9ee9ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 *</type>
      <name>tmp_wids</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a4f910ab2c18b0e68dce92816a27fb139</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct ngram_class_s **</type>
      <name>classes</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>a39384af3e6b53591d433436db011ac8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct ngram_funcs_s *</type>
      <name>funcs</name>
      <anchorfile>structngram__model__s.html</anchorfile>
      <anchor>ad3d9d8ad9773f958a89534220eda6fb9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_model_set_iter_s</name>
    <filename>structngram__model__set__iter__s.html</filename>
    <member kind="variable">
      <type>ngram_model_set_t *</type>
      <name>set</name>
      <anchorfile>structngram__model__set__iter__s.html</anchorfile>
      <anchor>ac03199d884b9ed641141a1512f87b0cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>cur</name>
      <anchorfile>structngram__model__set__iter__s.html</anchorfile>
      <anchor>afe1dd087a0beb86a29549785ab394f91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ngram_model_set_s</name>
    <filename>structngram__model__set__s.html</filename>
    <member kind="variable">
      <type>ngram_model_t</type>
      <name>base</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>a3b88f17aa148ceac4f32dd4cbf5f4f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_models</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>a6c28858d5631a9c9dbc7b2c9583f5c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>cur</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>a031e7d7dcf1667f69e1cb980f45623cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ngram_model_t **</type>
      <name>lms</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>a862d4c4feb5a903101f4a0fdc5ba8a62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char **</type>
      <name>names</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>aff5e13c45decde4c5bf30d8aa2b1c7d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 *</type>
      <name>lweights</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>a11068bb0029c788c506bec4507dd6d23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 **</type>
      <name>widmap</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>addebde44e2b7aa22dd82032c316fc962</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32 *</type>
      <name>maphist</name>
      <anchorfile>structngram__model__set__s.html</anchorfile>
      <anchor>af34ca232338c2d8c7dc8d13869ac09fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>olist</name>
    <filename>structolist.html</filename>
    <member kind="variable">
      <type>flag</type>
      <name>oerr</name>
      <anchorfile>structolist.html</anchorfile>
      <anchor>acb7f3c45380f7965c9ab177c228ed936</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnint</type>
      <name>ounit</name>
      <anchorfile>structolist.html</anchorfile>
      <anchor>af4443a6a577bfe9292cbf741c24c6e79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>ofnm</name>
      <anchorfile>structolist.html</anchorfile>
      <anchor>a6af6060865be898dfc66c0fd6630d545</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnlen</type>
      <name>ofnmlen</name>
      <anchorfile>structolist.html</anchorfile>
      <anchor>a497ca7ef9c2e42d5cd30c847fdbd3f10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>osta</name>
      <anchorfile>structolist.html</anchorfile>
      <anchor>a2cf08ac4e1e2fc9e6f21299df3f1d2e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>oacc</name>
      <anchorfile>structolist.html</anchorfile>
      <anchor>ad27927ac817bff0dbfa00d07f3e3e2d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>ofm</name>
      <anchorfile>structolist.html</anchorfile>
      <anchor>abe3c8fd2be6dc58be3157e2e0f48cf6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnint</type>
      <name>orl</name>
      <anchorfile>structolist.html</anchorfile>
      <anchor>a4c83b168f7afdd6c81a7843193c5755e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>oblnk</name>
      <anchorfile>structolist.html</anchorfile>
      <anchor>a6b914b4f6d4df1f377d40c964bd71625</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>output_type_s</name>
    <filename>structoutput__type__s.html</filename>
    <member kind="variable">
      <type>char const *</type>
      <name>name</name>
      <anchorfile>structoutput__type__s.html</anchorfile>
      <anchor>a978f479360a30a64f9e151d75ec2bb4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int(*</type>
      <name>output_header</name>
      <anchorfile>structoutput__type__s.html</anchorfile>
      <anchor>ad9df53f9f81d98e006e7f5b815a6bafa</anchor>
      <arglist>)(sphinx_wave2feat_t *wtf, int nfloat)</arglist>
    </member>
    <member kind="variable">
      <type>int(*</type>
      <name>output_frames</name>
      <anchorfile>structoutput__type__s.html</anchorfile>
      <anchor>a23a315808fdbf3d87ac037e5245a60d4</anchor>
      <arglist>)(sphinx_wave2feat_t *wtf, mfcc_t **frames, int nfr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pctr_t</name>
    <filename>structpctr__t.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structpctr__t.html</anchorfile>
      <anchor>a9674298e968c73272d477593c7b41ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>count</name>
      <anchorfile>structpctr__t.html</anchorfile>
      <anchor>adc5e6467eceb66d4f56a20514d06eb55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ptmr_t</name>
    <filename>structptmr__t.html</filename>
    <member kind="variable">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>structptmr__t.html</anchorfile>
      <anchor>a73b51c5a047300d77b3a82a7dcaf44f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>t_cpu</name>
      <anchorfile>structptmr__t.html</anchorfile>
      <anchor>acbd784f7332329999925d396deae3a5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>t_elapsed</name>
      <anchorfile>structptmr__t.html</anchorfile>
      <anchor>a743fce329d82fd7a9130cba5bbccd991</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>t_tot_cpu</name>
      <anchorfile>structptmr__t.html</anchorfile>
      <anchor>a301d13acc21718143b8b39b7af8b6677</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>t_tot_elapsed</name>
      <anchorfile>structptmr__t.html</anchorfile>
      <anchor>a2dc87aa035c8eb542279ca4496dd76f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>start_cpu</name>
      <anchorfile>structptmr__t.html</anchorfile>
      <anchor>a85c0c5f0e321cf11fb478b92a05223e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float64</type>
      <name>start_elapsed</name>
      <anchorfile>structptmr__t.html</anchorfile>
      <anchor>a1702b16a6c6bcb82f6c636f5e68af188</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RIFFHeader</name>
    <filename>structRIFFHeader.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>rifftag</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>a41ad222f7a391957baebb72b520ca313</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>TotalLength</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>a0432c23ba2c7421bc1a918e813e89b74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>wavefmttag</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>ab02082cd826cc18e14bf1509936d96d6</anchor>
      <arglist>[8]</arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>RemainingLength</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>a4f124bd29a8d7a36de8281d2bc836353</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>data_format</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>a6d51315afb5ee7c17ec42fed06ef72df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>numchannels</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>ab639e289d0009f82f7860edd8e324daf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>SamplingFreq</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>a7723e76cc1ff383b0f4f7a053f43d31f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>BytesPerSec</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>a003ffd3a4cc8cd55c7b4031723c5bac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>BlockAlign</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>a88c8a1a0cc69b955eada53fd28078497</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int16</type>
      <name>BitsPerSample</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>ad7a6f7b03f79a574ba5edd47e9a3451c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>datatag</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>ad8c58fa74d6d52637aa6f674a3a9482d</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>datalength</name>
      <anchorfile>structRIFFHeader.html</anchorfile>
      <anchor>a8900896018b1277439d20d824d8c3aba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sbevent_s</name>
    <filename>structsbevent__s.html</filename>
    <member kind="variable">
      <type>pthread_mutex_t</type>
      <name>mtx</name>
      <anchorfile>structsbevent__s.html</anchorfile>
      <anchor>a2c6c3b97c5c6bbdba1e97cc94c7441fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>pthread_cond_t</type>
      <name>cond</name>
      <anchorfile>structsbevent__s.html</anchorfile>
      <anchor>a19bacf6b25bc5e66c8691063c7bd305e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>signalled</name>
      <anchorfile>structsbevent__s.html</anchorfile>
      <anchor>a04d5cd777873bd83b337aacb6246281a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sbmsgq_s</name>
    <filename>structsbmsgq__s.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>data</name>
      <anchorfile>structsbmsgq__s.html</anchorfile>
      <anchor>a8c0c9fa562dd4eec79802138e577d740</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>depth</name>
      <anchorfile>structsbmsgq__s.html</anchorfile>
      <anchor>aba30e2b57423a93000697814347fa530</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>out</name>
      <anchorfile>structsbmsgq__s.html</anchorfile>
      <anchor>ad76947f213b9515762531e5b06e3fa91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>nbytes</name>
      <anchorfile>structsbmsgq__s.html</anchorfile>
      <anchor>a508c0e1d394985a4fd6ef2861b51f8b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>msg</name>
      <anchorfile>structsbmsgq__s.html</anchorfile>
      <anchor>a5a6b7b8d10dc431ce44cd7a7d2a1aca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>msglen</name>
      <anchorfile>structsbmsgq__s.html</anchorfile>
      <anchor>a4ee19f99df3ba79d54e3ccd19036a88b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>pthread_mutex_t</type>
      <name>mtx</name>
      <anchorfile>structsbmsgq__s.html</anchorfile>
      <anchor>a1a155e1f090870574f095bfe9801ef2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>pthread_cond_t</type>
      <name>cond</name>
      <anchorfile>structsbmsgq__s.html</anchorfile>
      <anchor>aa7380302e04ef8765f47f1e224ab9f27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sbmtx_s</name>
    <filename>structsbmtx__s.html</filename>
    <member kind="variable">
      <type>pthread_mutex_t</type>
      <name>mtx</name>
      <anchorfile>structsbmtx__s.html</anchorfile>
      <anchor>ace878fba44a1313bef64565a10323640</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sbthread_s</name>
    <filename>structsbthread__s.html</filename>
    <member kind="variable">
      <type>cmd_ln_t *</type>
      <name>config</name>
      <anchorfile>structsbthread__s.html</anchorfile>
      <anchor>aa8bb19dfc838bfe0982be55bbd465fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sbmsgq_t *</type>
      <name>msgq</name>
      <anchorfile>structsbthread__s.html</anchorfile>
      <anchor>a6bcbf60b6ee22edc7bec8173a917d0f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>sbthread_main</type>
      <name>func</name>
      <anchorfile>structsbthread__s.html</anchorfile>
      <anchor>a72ee08278db6c8e9ce3b41874764b1d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>void *</type>
      <name>arg</name>
      <anchorfile>structsbthread__s.html</anchorfile>
      <anchor>af2871ded3db7b22a948b7f0d345739db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>pthread_t</type>
      <name>th</name>
      <anchorfile>structsbthread__s.html</anchorfile>
      <anchor>adf5cbb42d7457ae244420cd679347de7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sorted_entry_s</name>
    <filename>structsorted__entry__s.html</filename>
    <member kind="variable">
      <type>lmprob_t</type>
      <name>val</name>
      <anchorfile>structsorted__entry__s.html</anchorfile>
      <anchor>a7bfd6c0c9c7240695a5909044177122f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>lower</name>
      <anchorfile>structsorted__entry__s.html</anchorfile>
      <anchor>a248960abac597c0f615ab01822f6d559</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32</type>
      <name>higher</name>
      <anchorfile>structsorted__entry__s.html</anchorfile>
      <anchor>a0b7f0225403703a4daa3780593db7237</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sorted_list_t</name>
    <filename>structsorted__list__t.html</filename>
    <member kind="variable">
      <type>sorted_entry_t *</type>
      <name>list</name>
      <anchorfile>structsorted__list__t.html</anchorfile>
      <anchor>a9c1b67b418297e14f9f6c1ea69dd3969</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>free</name>
      <anchorfile>structsorted__list__t.html</anchorfile>
      <anchor>aa7468ec9a2fe7c61d2bc76ba43c575ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>size</name>
      <anchorfile>structsorted__list__t.html</anchorfile>
      <anchor>a8fa949a4a4666c158df6a8d412dac415</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>sphinx_wave2feat_s</name>
    <filename>structsphinx__wave2feat__s.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>refcount</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>ae9b2fc4bfa6a3adbf2ee5a71796cdb51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cmd_ln_t *</type>
      <name>config</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>a484d308befbde315664da8520ebc410d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>fe_t *</type>
      <name>fe</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>a5882f148fe200890855304b46f00ee4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>infile</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>a6d4d1b1be4e3a3c1de82943e9e6fa65c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>outfile</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>aa50405dc75074933912da57295ec5fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>infh</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>ad86834e597d4677aed93e7c06cebccb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>outfh</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>ad7340fab24fb182cbff2c73fd1fb3671</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>short *</type>
      <name>audio</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>a776c72734abe1e34162a5ee347f533e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>mfcc_t **</type>
      <name>feat</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>ab43d8d5721133bcaf02da23c0bbb58ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>blocksize</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>aff2646e41780ceb9dcd234c719fd25f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>featsize</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>ac041852de738a42752be67cceb16660c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>veclen</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>ad71e5fca7c13ae0258bcee81a6f1fa89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>in_veclen</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>a3410a9e0c05c0057f31452550fb5380a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>byteswap</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>a030717e2736fd04d1a281f51e5db2799</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>output_type_t const *</type>
      <name>ot</name>
      <anchorfile>structsphinx__wave2feat__s.html</anchorfile>
      <anchor>a929e05e041ad922f6a2e35637a98c917</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spseg_s</name>
    <filename>structspseg__s.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>startfrm</name>
      <anchorfile>structspseg__s.html</anchorfile>
      <anchor>a0f62769ff904df2d374b9500a210374f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>nfrm</name>
      <anchorfile>structspseg__s.html</anchorfile>
      <anchor>a91271dd1e4a57bfe1c468e216f7dd42f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct spseg_s *</type>
      <name>next</name>
      <anchorfile>structspseg__s.html</anchorfile>
      <anchor>aec01e1c543395710d3510e18f0938b1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>spseg_t</name>
    <filename>structspseg__t.html</filename>
  </compound>
  <compound kind="struct">
    <name>tginfo_s</name>
    <filename>structtginfo__s.html</filename>
    <member kind="variable">
      <type>int32</type>
      <name>w1</name>
      <anchorfile>structtginfo__s.html</anchorfile>
      <anchor>aa151a34891820c55e0fef60cc74b6e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n_tg</name>
      <anchorfile>structtginfo__s.html</anchorfile>
      <anchor>a5eb046b3d09a4c80e4cdf216c6c7eb46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>bowt</name>
      <anchorfile>structtginfo__s.html</anchorfile>
      <anchor>ac5e9be48da8563941be03f3cd09e3c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>used</name>
      <anchorfile>structtginfo__s.html</anchorfile>
      <anchor>a38d6aa51b244a7138c476a6e663ffbb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>trigram_t *</type>
      <name>tg</name>
      <anchorfile>structtginfo__s.html</anchorfile>
      <anchor>a3642dc5ac56de1829665bb7d42c9372a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>struct tginfo_s *</type>
      <name>next</name>
      <anchorfile>structtginfo__s.html</anchorfile>
      <anchor>a184e60660a4c8168b5268260cd98ffa5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>trans_list_s</name>
    <filename>structtrans__list__s.html</filename>
    <member kind="variable">
      <type>hash_table_t *</type>
      <name>null_trans</name>
      <anchorfile>structtrans__list__s.html</anchorfile>
      <anchor>a15223c70915f916f5656627985c6fd39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hash_table_t *</type>
      <name>trans</name>
      <anchorfile>structtrans__list__s.html</anchorfile>
      <anchor>ade18f3313bc542cee585f0c5c16de96a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>trigram_s</name>
    <filename>structtrigram__s.html</filename>
    <member kind="variable">
      <type>uint32</type>
      <name>wid</name>
      <anchorfile>structtrigram__s.html</anchorfile>
      <anchor>a492e1fedb16fa11d26a941177c1305be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>prob3</name>
      <anchorfile>structtrigram__s.html</anchorfile>
      <anchor>a52f3fad42f7c653a469af0c1b75988a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>wid</name>
      <anchorfile>structtrigram__s.html</anchorfile>
      <anchor>ad90726c9d1c5b2d564205b4feddcb674</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>U</name>
    <filename>unionU.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>d</name>
      <anchorfile>unionU.html</anchorfile>
      <anchor>a6379e5194213c802bb8c6786eca8ad50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ULong</type>
      <name>L</name>
      <anchorfile>unionU.html</anchorfile>
      <anchor>aa72022b00fe1608edcdbc0a12e525164</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>unigram_s</name>
    <filename>structunigram__s.html</filename>
    <member kind="variable">
      <type>lmprob_t</type>
      <name>prob1</name>
      <anchorfile>structunigram__s.html</anchorfile>
      <anchor>a488db9623272838a933cd4b768409fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>lmprob_t</type>
      <name>bo_wt1</name>
      <anchorfile>structunigram__s.html</anchorfile>
      <anchor>ad33b4af5b40a8d13ffae932bab003df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>bigrams</name>
      <anchorfile>structunigram__s.html</anchorfile>
      <anchor>ae148f631c0d9851b14bb9cb31c0c061d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Vardesc</name>
    <filename>structVardesc.html</filename>
    <member kind="variable">
      <type>char *</type>
      <name>name</name>
      <anchorfile>structVardesc.html</anchorfile>
      <anchor>a9dcb9122e28bfb7d88caed2ffa38f1ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>addr</name>
      <anchorfile>structVardesc.html</anchorfile>
      <anchor>abc6f3753ac54741fafe32fcc744993ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ftnlen *</type>
      <name>dims</name>
      <anchorfile>structVardesc.html</anchorfile>
      <anchor>a7be667d06905f6c6463ede740ed242ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>type</name>
      <anchorfile>structVardesc.html</anchorfile>
      <anchor>ac901f905f9cf2c9011684b7e612cc16c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>yin_s</name>
    <filename>structyin__s.html</filename>
    <member kind="variable">
      <type>uint16</type>
      <name>frame_size</name>
      <anchorfile>structyin__s.html</anchorfile>
      <anchor>a25a7e0400397ab1fcbf82f4d0568722a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>search_threshold</name>
      <anchorfile>structyin__s.html</anchorfile>
      <anchor>a8cca938167af6b504458ff9578420afd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>search_range</name>
      <anchorfile>structyin__s.html</anchorfile>
      <anchor>a208dfba1535fdd31962e687d82913dfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16</type>
      <name>nfr</name>
      <anchorfile>structyin__s.html</anchorfile>
      <anchor>af4f11d14a36bbdc19863fa8335237423</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>wsize</name>
      <anchorfile>structyin__s.html</anchorfile>
      <anchor>a024d8e9d70f94a7f62457154fb5a4b03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>wstart</name>
      <anchorfile>structyin__s.html</anchorfile>
      <anchor>a18481851da6db4df2a469b80c2c5704e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>wcur</name>
      <anchorfile>structyin__s.html</anchorfile>
      <anchor>ab79376deb3761d5d3ae72f727ac25660</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned char</type>
      <name>endut</name>
      <anchorfile>structyin__s.html</anchorfile>
      <anchor>a61ca0fc8444a1bdde10aca37dc9f0f56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>fixed32 **</type>
      <name>diff_window</name>
      <anchorfile>structyin__s.html</anchorfile>
      <anchor>a932e8441ff0aa6b9b37f5055c97a4d11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16 *</type>
      <name>period_window</name>
      <anchorfile>structyin__s.html</anchorfile>
      <anchor>a1928cec127e250f6cd15249085bc9fc8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>yy_buffer_state</name>
    <filename>structyy__buffer__state.html</filename>
    <member kind="variable">
      <type>FILE *</type>
      <name>yy_input_file</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>a4843d1422e3276b636d475a3095bd948</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>yy_ch_buf</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>ad7b8df8d8a4688e57b0b8d3ca75adc85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>yy_buf_pos</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>a58aa927f098b99d99e75da80f9b681ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>yy_size_t</type>
      <name>yy_buf_size</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>a48302f5f3477a9c78bbddf56d356ef54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_n_chars</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>a06406208824817acfec2183b79080945</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_is_our_buffer</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>a80ce2431c70dc4f89ced487f18449465</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_is_interactive</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>abf5c70eea75581b58c0ee7bd31b14490</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_at_bol</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>a9d60c60af6e1a6f69de16871fd64f85f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_bs_lineno</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>a818e94bc9c766e683c60df1e9fd01199</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_bs_column</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>a10c4fcd8be759e6bf11e6d3e8cdb0307</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_fill_buffer</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>a63d2afbb1d79a3fc63df9e12626f827d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_buffer_status</name>
      <anchorfile>structyy__buffer__state.html</anchorfile>
      <anchor>a70fd925d37a2f0454fbd0def675d106c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>yy_trans_info</name>
    <filename>structyy__trans__info.html</filename>
    <member kind="variable">
      <type>flex_int32_t</type>
      <name>yy_verify</name>
      <anchorfile>structyy__trans__info.html</anchorfile>
      <anchor>a5c9f61e770deef50bd4e697310342fe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>flex_int32_t</type>
      <name>yy_nxt</name>
      <anchorfile>structyy__trans__info.html</anchorfile>
      <anchor>ae0715250c2bef261e596e77e0030f13e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>yyalloc</name>
    <filename>unionyyalloc.html</filename>
    <member kind="variable">
      <type>yytype_int16</type>
      <name>yyss_alloc</name>
      <anchorfile>unionyyalloc.html</anchorfile>
      <anchor>a4800e0520a89a4789afa7b5d82197e65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>YYSTYPE</type>
      <name>yyvs_alloc</name>
      <anchorfile>unionyyalloc.html</anchorfile>
      <anchor>a9326f4fdc6f737a929444427836d8928</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>yyguts_t</name>
    <filename>structyyguts__t.html</filename>
    <member kind="variable">
      <type>YY_EXTRA_TYPE</type>
      <name>yyextra_r</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>aef05c0d6725a5214f6b30466f0b01c47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>yyin_r</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>a21f81ca100b12364a5095a37d1c6f650</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FILE *</type>
      <name>yyout_r</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>a436368a905aaf12e809e265749c74031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>yy_buffer_stack_top</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>af92507d904af2fcd4509acde654a9850</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>yy_buffer_stack_max</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>a4435bb91e87f9988b096afc21386289a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>YY_BUFFER_STATE *</type>
      <name>yy_buffer_stack</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>ad0b9d576189d518a4482f20ed9b2a416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>yy_hold_char</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>adde3f71374c223bbac47284824996e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_n_chars</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>a99c9218941829a6662d358422fd4184a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yyleng_r</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>aba739bc731f0e9cbb0b6bdfca7930ebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>yy_c_buf_p</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>ab1b9bcacb33aab1e02b625512bc0e221</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_init</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>abbef56b2d8359f6a15629c104f5dd030</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_start</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>a8baf7d47fe53035d9bc2a9670795ff01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_did_buffer_switch_on_eof</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>a2daec411627700709ef2fd927e69627d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_start_stack_ptr</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>ad9e132dacc2904a8ae76c64c72e33795</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_start_stack_depth</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>a35bedf1c17debd766565b99c39132eb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int *</type>
      <name>yy_start_stack</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>af6e2e45a5fdba0f313c680b35da4292a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>yy_state_type</type>
      <name>yy_last_accepting_state</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>a84e01a3658729e9d69f79feb3faf1c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>yy_last_accepting_cpos</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>a46fb8d232ed375921af0b37caeeb67c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yylineno_r</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>aa9f13776b8d311e847cc7d974d49af4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_flex_debug_r</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>a5ad72d75ed6d693824fe7e02ce21118e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>yytext_r</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>aebaa731ad6cbe2411d104925e5bb3f2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_more_flag</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>a664a72171cc3e720fcb8120af9b72883</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>yy_more_len</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>a683563bf4cd73f25b4c7b78579c1330e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>YYSTYPE *</type>
      <name>yylval_r</name>
      <anchorfile>structyyguts__t.html</anchorfile>
      <anchor>a55dbdcd46a36d34adcbfc29be44d10cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
</tagfile>
